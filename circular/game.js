// Generated by Haxe 3.4.7
(function ($hx_exports, $global) { "use strict";
$hx_exports["util"] = $hx_exports["util"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Config = $hx_exports["Config"] = function() {
};
Config.__name__ = true;
Config.getText = function(key) {
	return Reflect.field(Reflect.field(Config.TEXTS,Config.LANG),key);
};
Config.prototype = {
	__class__: Config
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var Main = $hx_exports["Game"] = function() {
	this.tickListeners = [];
	Main.instance = this;
	createjs.Ticker = null;
	util_LoaderWrapper.LOAD_ASSETS(Config.ASSETS,$bind(this,this.onAssetsLoaded));
	sounds_Sounds.initSounds();
};
Main.__name__ = true;
Main.main = function() {
	$().ready(function() {
		new Main();
	});
};
Main.prototype = {
	onAssetsLoaded: function() {
		this.initializeRenderer();
		this.initializeControls();
		window.addEventListener("resize",$bind(this,this.onResize),false);
		window.addEventListener("orientationchange",$bind(this,this.onResize),false);
	}
	,onResize: function(event) {
		var _gthis = this;
		if(this.resizeTimer != null) {
			this.resizeTimer.stop();
		}
		this.resizeTimer = haxe_Timer.delay(function() {
			var size = _gthis.getGameSize();
			_gthis.renderer.resize(size.width,size.height);
			_gthis.game.resize(size);
			_gthis.start.resize(size);
		},50);
	}
	,getGameSize: function() {
		return new PIXI.Rectangle(0,0,window.innerWidth,window.innerHeight);
	}
	,initializeRenderer: function() {
		var size = this.getGameSize();
		var options = { };
		options.autoResize = false;
		options.antialias = true;
		options.backgroundColor = 0;
		options.clearBeforeRender = false;
		options.preserveDrawingBuffer = false;
		options.roundPixels = false;
		this.renderer = PIXI.autoDetectRenderer(size.width,size.height,options);
		window.document.getElementById("game").appendChild(this.renderer.view);
	}
	,initializeControls: function() {
		this.mainContainer = new PIXI.Container();
		this.game = new controls_GameView();
		this.start = new controls_StartView();
		this.game.circle.addListener(controls_CircleRenderer.GAME_OVER,($_=this.start,$bind($_,$_.toView)));
		this.mainContainer.addChild(this.game);
		this.mainContainer.addChild(this.start);
		this.start.addListener(controls_StartView.START,$bind(this,this.onstart));
		this.onResize(null);
		this.ticker = new PIXI.ticker.Ticker();
		this.ticker.start();
		this.ticker.add($bind(this,this.onTickerTick));
	}
	,onstart: function() {
		this.start.logo.visible = false;
		this.game.start();
	}
	,onTickerTick: function() {
		var delta = this.ticker.deltaTime;
		createjs.Tween.tick(this.ticker.elapsedMS,false);
		var _g = 0;
		var _g1 = this.tickListeners;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t(delta);
		}
		this.renderer.render(this.mainContainer);
	}
	,__class__: Main
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var controls_CircleRenderer = function() {
	this.c = 0;
	this.trackPoints = [];
	this.pind = 0;
	this.hits = [];
	this.running = false;
	this.totaltime = 0;
	this.previous = 0;
	this.speed = 0;
	this.size = new PIXI.Rectangle(0,0,100,100);
	this.dir = 1;
	this.radius = 50;
	this.centerPoint = new PIXI.Point(controls_CircleRenderer.WIDTH / 2,controls_CircleRenderer.HEIGHT / 2);
	this.angle = 0;
	this.curpos = new PIXI.Point(controls_CircleRenderer.WIDTH / 2,controls_CircleRenderer.HEIGHT / 2);
	var _gthis = this;
	PIXI.Container.call(this);
	this.curs = new PIXI.Graphics();
	this.curs.beginFill(16748544,1);
	this.curs.drawCircle(0,0,2);
	this.curs.endFill();
	this.nexs = new PIXI.Graphics();
	this.nexs.beginFill(16711680,1);
	this.nexs.drawCircle(0,0,1);
	this.nexs.endFill();
	var _g1 = 0;
	var _g = controls_CircleRenderer.WIDTH * controls_CircleRenderer.HEIGHT;
	while(_g1 < _g) {
		var i = _g1++;
		this.hits[i] = 0;
	}
	this.renderTexture = PIXI.RenderTexture.create(controls_CircleRenderer.WIDTH,controls_CircleRenderer.HEIGHT);
	this.container = new PIXI.Container();
	this.radius = Math.sin(this.totaltime) * 20 + 50;
	var points = [];
	var _g2 = 0;
	while(_g2 < 30) {
		var i1 = _g2++;
		points.push(new PIXI.Point(controls_CircleRenderer.WIDTH / 2 + this.radius,controls_CircleRenderer.HEIGHT / 2));
	}
	var _g11 = 0;
	var _g3 = 300;
	while(_g11 < _g3) {
		var i2 = _g11++;
		this.trackPoints.push(new PIXI.Point(controls_CircleRenderer.WIDTH / 2 + this.radius,controls_CircleRenderer.HEIGHT / 2));
	}
	this.rope = new PIXI.mesh.Rope(util_Asset.getTexture("rope.png",false),points);
	this.container.addChild(this.rope);
	this.sprite = new PIXI.Sprite(this.renderTexture);
	this.sprite.pivot.x = this.sprite.pivot.y = 1024;
	this.addChild(this.sprite);
	this.centerPoint.y -= this.radius;
	Main.instance.tickListeners.push($bind(this,this.update));
	this.interactive = true;
	this.hitArea = new PIXI.Rectangle(0,0,100,100);
	this.addListener("click",$bind(this,this.swapDir));
	this.addListener("tap",$bind(this,this.swapDir));
	Main.instance.renderer.render(this.container,this.renderTexture);
	this.blast = util_Asset.getImage("blast.png",false);
	this.blast.blendMode = PIXI.BLEND_MODES.ADD;
	this.sprite.addChild(this.blast);
	this.blast.anchor.set(0.5,0.5);
	this.blast.visible = false;
	this.sprite.addChild(this.curs);
	this.sprite.addChild(this.nexs);
	this.powersups = [];
	var _g4 = 0;
	while(_g4 < 50) {
		var i3 = _g4++;
		var sp = util_Asset.getImage("powerup.png",false);
		this.sprite.addChild(sp);
		sp.visible = false;
		sp.anchor.set(0.5,0.5);
		this.powersups.push(sp);
	}
	this.g = new PIXI.Graphics();
	this.g.lineStyle(10,16777215,1);
	this.g.drawRect(0,0,controls_CircleRenderer.WIDTH,controls_CircleRenderer.HEIGHT);
	this.sprite.addChild(this.g);
	window.document.addEventListener("keydown",function(e) {
		if(e.keyCode == 38) {
			_gthis.speed++;
		}
		if(e.keyCode == 40) {
			_gthis.speed--;
		}
		if(e.keyCode == 39) {
			_gthis.swapDir({ data : { global : { x : _gthis.size.width}}});
		}
		if(e.keyCode == 37) {
			_gthis.swapDir({ data : { global : { x : 0}}});
		}
	});
};
controls_CircleRenderer.__name__ = true;
controls_CircleRenderer.__super__ = PIXI.Container;
controls_CircleRenderer.prototype = $extend(PIXI.Container.prototype,{
	spawnPowerup: function() {
		var sp = this.powersups[this.pind % this.powersups.length];
		this.pind++;
		sp.visible = true;
		sp.x = Math.random() * (controls_CircleRenderer.WIDTH - 200) - 100;
		sp.y = Math.random() * (controls_CircleRenderer.HEIGHT - 200) - 100;
		sp.scale.set(1,1);
		sp.alpha = 1;
	}
	,swapDir: function(e) {
		var now = new Date().getTime();
		if(now - this.previous < 200) {
			return;
		}
		this.previous = now;
		var ep = this.rope.points[this.rope.points.length - 1];
		var dy = Math.sin(this.angle) * this.radius;
		var dx = Math.cos(this.angle) * this.radius;
		this.centerPoint.x += dx * 2;
		this.centerPoint.y += dy * 2;
		var tdir = e.data.global.x < this.size.width / 2 ? -1 : 1;
		this.dir *= -1;
		createjs.Tween.removeTweens(this);
		createjs.Tween.get(this).to({ dir : tdir},500,createjs.Ease.quadInOut);
		this.angle = Math.atan2(ep.y - this.centerPoint.y,ep.x - this.centerPoint.x);
	}
	,resize: function(size) {
		this.size = size;
		this.hitArea = size;
	}
	,start: function() {
		this.curs.visible = this.nexs.visible = true;
		var _g1 = 0;
		var _g = this.hits.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.hits[i] = 0;
		}
		var _g2 = 0;
		var _g11 = this.trackPoints;
		while(_g2 < _g11.length) {
			var ep = _g11[_g2];
			++_g2;
			ep.set(controls_CircleRenderer.WIDTH / 2 + this.radius,controls_CircleRenderer.HEIGHT / 2);
		}
		var _g12 = 0;
		var _g3 = this.rope.points.length;
		while(_g12 < _g3) {
			var i1 = _g12++;
			this.rope.points[i1].set(controls_CircleRenderer.WIDTH / 2 + this.radius,controls_CircleRenderer.HEIGHT / 2);
		}
		this.curpos = new PIXI.Point(controls_CircleRenderer.WIDTH / 2,controls_CircleRenderer.HEIGHT / 2);
		this.centerPoint.set(controls_CircleRenderer.WIDTH / 2,controls_CircleRenderer.HEIGHT / 2);
		Main.instance.renderer.clearBeforeRender = true;
		Main.instance.renderer.render(this.container,this.renderTexture);
		Main.instance.renderer.clearBeforeRender = false;
		if(controls_StartView.MODE == "survival") {
			var _g13 = 0;
			var _g4 = this.powersups.length / 2;
			while(_g13 < _g4) {
				var i2 = _g13++;
				this.spawnPowerup();
			}
		} else if(controls_StartView.MODE != "artmode") {
			this.spawnPowerup();
		}
	}
	,update: function(delta) {
		if(!this.running) {
			return;
		}
		this.angle += this.dir * delta / 60 * this.speed;
		var _g1 = 0;
		var _g = this.trackPoints.length - 1;
		while(_g1 < _g) {
			var i = _g1++;
			this.trackPoints[i].copy(this.trackPoints[i + 1]);
		}
		var _g11 = 0;
		var _g2 = this.rope.points.length - 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.rope.points[i1].copy(this.trackPoints[Math.floor(i1 / this.rope.points.length * this.trackPoints.length)]);
		}
		this.curs.position.copy(this.centerPoint);
		var dy = Math.sin(this.angle) * this.radius;
		var dx = Math.cos(this.angle) * this.radius;
		this.nexs.position.set(this.centerPoint.x + dx * 2,this.centerPoint.y + dy * 2);
		var ep = this.rope.points[this.rope.points.length - 1];
		ep.x = Math.cos(this.angle) * this.radius + this.centerPoint.x;
		ep.y = Math.sin(this.angle) * this.radius + this.centerPoint.y;
		this.trackPoints[this.trackPoints.length - 1].copy(ep);
		var cp = this.rope.points[this.rope.points.length - 20];
		var spi = Math.round(cp.x) + Math.round(cp.y) * controls_CircleRenderer.WIDTH;
		if(spi >= 0 && spi < this.hits.length && controls_StartView.MODE != "artmode") {
			this.hits[spi] = 1;
		}
		this.sprite.pivot.x += (ep.x - this.sprite.pivot.x) / 25;
		this.sprite.pivot.y += (ep.y - this.sprite.pivot.y) / 25;
		this.sprite.x = this.size.width / 2;
		this.sprite.y = this.size.height / 2;
		this.totaltime += delta / 120;
		this.radius = Math.sin(this.totaltime) * 20 + 50;
		Main.instance.renderer.render(this.container,this.renderTexture);
		var epx = Math.round(ep.x);
		var epy = Math.round(ep.y);
		var epi = Math.round(ep.x) + Math.round(ep.y) * controls_CircleRenderer.WIDTH;
		if(epx < 0 || epx >= controls_CircleRenderer.WIDTH || epy < 0 || epy >= controls_CircleRenderer.HEIGHT || this.hits[epi] > 0) {
			this.running = false;
			this.emit(controls_CircleRenderer.GAME_OVER);
			this.ongameover();
			this.blast.scale.set(0.2,0.2);
			this.blast.visible = true;
			this.blast.position.copy(ep);
			this.blast.alpha = 1;
			createjs.Tween.get(this.blast).to({ alpha : 0},1500,createjs.Ease.quadIn);
			createjs.Tween.get(this.blast.scale).to({ x : 4, y : 4},1500,createjs.Ease.quadOut);
		} else {
			var hits = [];
			var _g3 = 0;
			var _g12 = this.powersups;
			while(_g3 < _g12.length) {
				var sp = _g12[_g3];
				++_g3;
				if(!sp.visible) {
					continue;
				}
				sp.rotation += delta / 15;
				var dx1 = sp.x - ep.x;
				var dy1 = sp.y - ep.y;
				if(Math.sqrt(dx1 * dx1 + dy1 * dy1) < 25) {
					hits.push(sp);
				}
			}
			var _g4 = 0;
			while(_g4 < hits.length) {
				var h = hits[_g4];
				++_g4;
				if(createjs.Tween.hasActiveTweens(h)) {
					continue;
				}
				createjs.Tween.get(h.scale).to({ x : 3, y : 3},250,createjs.Ease.quadInOut);
				createjs.Tween.get(h).to({ alpha : 0},250,createjs.Ease.quadIn).set({ visible : false});
				if(controls_StartView.MODE == "survival" || controls_StartView.MODE == "artmode") {
					this.spawnPowerup();
				}
			}
			if(controls_StartView.MODE == "rescue" && hits.length > 0) {
				this.running = false;
				this.emit(controls_CircleRenderer.GAME_OVER);
				this.ongameover();
			}
		}
	}
	,ongameover: function() {
		this.curs.visible = this.nexs.visible = false;
		var ts = Math.min(this.size.width / controls_CircleRenderer.WIDTH,this.size.height / controls_CircleRenderer.HEIGHT);
		createjs.Tween.get(this.sprite.scale).to({ x : ts * 0.75, y : ts * 0.75},3500,createjs.Ease.quadInOut);
		var _g = 0;
		var _g1 = this.powersups;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			createjs.Tween.get(p).wait(Math.floor(Math.random() * 500)).to({ alpha : 0},500,createjs.Ease.quadInOut);
		}
		createjs.Tween.get(this.sprite).to({ rotation : Math.random() - 0.5},3500,createjs.Ease.quadInOut);
		var tmp = controls_CircleRenderer.WIDTH / 2;
		var tmp1 = controls_CircleRenderer.HEIGHT / 2;
		createjs.Tween.get(this.sprite.pivot).to({ x : tmp, y : tmp1},3500,createjs.Ease.quadInOut);
	}
	,__class__: controls_CircleRenderer
});
var controls_GameView = $hx_exports["GV"] = function() {
	PIXI.Container.call(this);
	this.initializeControls();
};
controls_GameView.__name__ = true;
controls_GameView.__super__ = PIXI.Container;
controls_GameView.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.circle = new controls_CircleRenderer();
		this.addChild(this.circle);
	}
	,resize: function(size) {
		this.size = size;
		this.circle.resize(size);
	}
	,start: function() {
		this.circle.running = true;
		this.circle.speed = 1;
		createjs.Tween.get(this.circle).to({ speed : 4},60000,createjs.Ease.quadInOut);
		this.circle.start();
	}
	,__class__: controls_GameView
});
var controls_StartView = function() {
	PIXI.Container.call(this);
	this.initializeControls();
};
controls_StartView.__name__ = true;
controls_StartView.__super__ = PIXI.Container;
controls_StartView.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		var _gthis = this;
		this.btns = new PIXI.Container();
		this.survival = util_Asset.getImage("survival.png",false);
		this.rescue = util_Asset.getImage("rescue.png",false);
		this.artmode = util_Asset.getImage("artmode.png",false);
		this.logo = util_Asset.getImage("logo.png",false);
		this.logo.anchor.set(0.5,0.5);
		this.btns.addChild(this.survival);
		this.btns.addChild(this.rescue);
		this.btns.addChild(this.artmode);
		this.survival.anchor.set(0.5,0.5);
		this.rescue.anchor.set(0.5,0.5);
		this.artmode.anchor.set(0.5,0.5);
		this.survival.alpha = this.rescue.alpha = this.artmode.alpha = 0.75;
		this.artmode.y = 0;
		this.survival.y = 120;
		this.artmode.y = 240;
		this.logo.y = -100;
		this.btns.addChild(this.logo);
		this.addChild(this.btns);
		this.dohover(this.survival);
		this.dohover(this.rescue);
		this.dohover(this.artmode);
		this.rescue.addListener("click",function() {
			controls_StartView.MODE = "rescue";
			_gthis.dostart();
		});
		this.survival.addListener("click",function() {
			controls_StartView.MODE = "survival";
			_gthis.dostart();
		});
		this.artmode.addListener("click",function() {
			controls_StartView.MODE = "artmode";
			_gthis.dostart();
		});
	}
	,dostart: function() {
		var _gthis = this;
		this.rescue.interactive = this.survival.interactive = this.artmode.interactive = false;
		createjs.Tween.removeTweens(this.survival);
		createjs.Tween.removeTweens(this.rescue);
		createjs.Tween.removeTweens(this.artmode);
		createjs.Tween.get(this.rescue).to({ alpha : 0},350);
		createjs.Tween.get(this.survival).wait(150,true).to({ alpha : 0},350);
		createjs.Tween.get(this.artmode).wait(300,true).to({ alpha : 0},350).call(function() {
			_gthis.emit(controls_StartView.START);
		});
	}
	,toView: function() {
		var _gthis = this;
		this.btns.x = this.size.width - this.btns.width;
		createjs.Tween.get(this.rescue).wait(4000,true).to({ alpha : 1},350);
		createjs.Tween.get(this.survival).wait(4150,true).to({ alpha : 1},350);
		createjs.Tween.get(this.artmode).wait(4300,true).to({ alpha : 1},350).call(function() {
			_gthis.rescue.interactive = _gthis.survival.interactive = _gthis.artmode.interactive = true;
		});
	}
	,dohover: function(s) {
		s.interactive = true;
		s.buttonMode = true;
		s.addListener("mouseover",function(e) {
			createjs.Tween.removeTweens(s);
			createjs.Tween.get(s).to({ alpha : 1},50);
		});
		s.addListener("mouseout",function(e1) {
			createjs.Tween.removeTweens(s);
			createjs.Tween.get(s).to({ alpha : 0.75},150,createjs.Ease.quadIn);
		});
	}
	,resize: function(size) {
		this.size = size;
		this.btns.scale.set(1,1);
		var s = Math.min(size.width / this.btns.width,size.height / this.btns.height);
		if(s > 1) {
			s = 1;
		}
		this.btns.scale.set(s,s);
		this.btns.y = Math.round((size.height - 200 - this.btns.height) / 2 + 200 * s);
		this.btns.x = Math.round(size.width / 2);
	}
	,__class__: controls_StartView
});
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var sounds_Sounds = $hx_exports["Sounds"] = function() { };
sounds_Sounds.__name__ = true;
sounds_Sounds.initSounds = function() {
	createjs.Sound.addEventListener("fileload",sounds_Sounds.soundLoadHandler);
	sounds_Sounds.loaded = [];
	sounds_Sounds.soundMap = new haxe_ds_StringMap();
	var base = "snd/";
	sounds_Sounds.sounds = [];
	var _g = 0;
	var _g1 = sounds_Sounds.sounds;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		createjs.Sound.registerSound(base + Std.string(s.s) + ".mp3",s.s,s.c);
	}
	var iOS = new RegExp("iPad|iPhone|iPod").test(window.navigator.userAgent) && !window.MSStream;
	if(iOS) {
		sounds_Sounds.waitingForIOS = true;
		window.addEventListener("click",sounds_Sounds.handleInitClick,true);
		window.addEventListener("touchstart",sounds_Sounds.handleInitClick,true);
	}
	var hidden = null;
	var visibilityChange = null;
	if(window.document.hidden != null) {
		hidden = "hidden";
		visibilityChange = "visibilitychange";
	} else if(window.document.msHidden != null) {
		hidden = "msHidden";
		visibilityChange = "msvisibilitychange";
	} else if(window.document.webkitHidden != null) {
		hidden = "webkitHidden";
		visibilityChange = "webkitvisibilitychange";
	}
	window.document.addEventListener(visibilityChange,function() {
		if(Reflect.field(window.document,hidden)) {
			createjs.Sound.setMute(true);
		} else {
			createjs.Sound.setMute(false);
			var tmp = !createjs.Sound.getMute() && !sounds_Sounds.waitingForIOS;
		}
	});
	sounds_Sounds.initok = true;
	sounds_Sounds.totalSounds = 0;
	return true;
};
sounds_Sounds.soundLoadHandler = function(e) {
	sounds_Sounds.soundsLoaded++;
	if(sounds_Sounds.loadChange != null) {
		sounds_Sounds.loadChange(sounds_Sounds.soundsLoaded);
	}
	if(e.id != null) {
		sounds_Sounds.loaded.push(e.id);
	}
	if(sounds_Sounds.soundsLoaded == sounds_Sounds.totalSounds && sounds_Sounds.loadedHandler != null) {
		sounds_Sounds.loadedHandler();
	}
};
sounds_Sounds.handleInitClick = function(event) {
	sounds_Sounds.waitingForIOS = false;
	window.removeEventListener("touchstart",sounds_Sounds.handleInitClick,true);
	window.removeEventListener("click",sounds_Sounds.handleInitClick,true);
	var tmp = !createjs.Sound.getMute();
};
sounds_Sounds.playEffect = function(name,loops,volume,delay) {
	if(!sounds_Sounds.soundRegistered(name)) {
		console.log("sound " + name + " not found");
	}
	if(!createjs.Sound.getMute() && sounds_Sounds.initok && sounds_Sounds.soundRegistered(name)) {
		if(volume == null) {
			volume = 1;
		}
		if(loops == null) {
			loops = 0;
		}
		if(delay == null) {
			delay = 0;
		}
		var _this = sounds_Sounds.soundMap;
		var value = createjs.Sound.play(name,{ delay : delay, interrupt : createjs.Sound.INTERRUPT_ANY, loop : loops, volume : volume});
		if(__map_reserved[name] != null) {
			_this.setReserved(name,value);
		} else {
			_this.h[name] = value;
		}
	}
	var _this1 = sounds_Sounds.soundMap;
	if(__map_reserved[name] != null) {
		return _this1.getReserved(name);
	} else {
		return _this1.h[name];
	}
};
sounds_Sounds.soundRegistered = function(name) {
	return Object.prototype.hasOwnProperty.call(createjs.Sound._idHash,name);
};
sounds_Sounds.stopSound = function(name) {
	var _this = sounds_Sounds.soundMap;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		var _this1 = sounds_Sounds.soundMap;
		(__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]).stop();
	}
};
sounds_Sounds.getSound = function(name) {
	var _this = sounds_Sounds.soundMap;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
sounds_Sounds.enableSounds = function() {
	if(createjs.Sound.getMute() && sounds_Sounds.initok) {
		createjs.Sound.setMute(false);
	}
};
sounds_Sounds.disableSounds = function() {
	createjs.Sound.setMute(true);
};
var util_Asset = $hx_exports["util"]["Asset"] = function() {
	throw new js__$Boot_HaxeError("Asset is static only.");
};
util_Asset.__name__ = true;
util_Asset.init = function(loader) {
	util_Asset._loader = loader;
};
util_Asset.getResource = function(name) {
	if(!Object.prototype.hasOwnProperty.call(util_Asset._loader.resources,name)) {
		console.log("Resource " + name + " not found!");
	}
	return Reflect.field(util_Asset._loader.resources,name);
};
util_Asset.getRawImage = function(name) {
	return util_Asset.getResource(name).data;
};
util_Asset.getTexture = function(name,fromSheet) {
	if(!fromSheet) {
		name = "img/" + name;
	}
	var tex = null;
	try {
		tex = PIXI.Texture.fromFrame(name);
	} catch( e ) {
		tex = PIXI.Texture.fromImage(name);
	}
	if(tex == null) {
		console.log("Warning: Asset " + name + " not found.");
	}
	if(tex != null && util_Asset._prepared.indexOf(tex.baseTexture) == -1) {
		util_Asset._prepared.push(tex.baseTexture);
		Main.instance.renderer.plugins.prepare.upload(tex.baseTexture);
	}
	return tex;
};
util_Asset.getImage = function(name,fromSheet) {
	if(!fromSheet) {
		name = "img/" + name;
	}
	var sprite = null;
	try {
		sprite = PIXI.Sprite.fromFrame(name);
	} catch( e ) {
		var t = PIXI.Texture.fromImage(name);
		var sprite1 = new PIXI.Sprite(t);
	}
	if(sprite == null) {
		console.log("Warning: Asset " + name + " not found.");
	}
	if(sprite != null && util_Asset._prepared.indexOf(sprite.texture.baseTexture) == -1) {
		util_Asset._prepared.push(sprite.texture.baseTexture);
		Main.instance.renderer.plugins.prepare.upload(sprite.texture.baseTexture);
	}
	return sprite;
};
util_Asset.getTexturesAndAnimations = function(json,id) {
	var tex = [];
	var anim = { };
	var ret = { textures : tex, animations : anim};
	var count = 0;
	var _g = 0;
	var _g1 = Reflect.fields(json.frames);
	while(_g < _g1.length) {
		var frame = _g1[_g];
		++_g;
		var data = Reflect.field(json.frames,frame);
		var split = frame.split("/");
		if(split[0] != id) {
			continue;
		}
		var animName = split[1];
		var spriteName = split[2];
		var texture = PIXI.Texture.fromFrame(frame);
		tex.push(texture);
		if(texture != null && util_Asset._prepared.indexOf(texture.baseTexture) == -1) {
			util_Asset._prepared.push(texture.baseTexture);
			Main.instance.renderer.plugins.prepare.upload(texture.baseTexture);
		}
		if(Object.prototype.hasOwnProperty.call(anim,animName)) {
			Reflect.field(anim,animName)[1] = count;
		} else {
			anim[animName] = [count,count];
		}
		++count;
	}
	return ret;
};
util_Asset.getTextures = function(json,id) {
	var tex = [];
	var _g = 0;
	var _g1 = Reflect.fields(json.frames);
	while(_g < _g1.length) {
		var frame = _g1[_g];
		++_g;
		var data = Reflect.field(json.frames,frame);
		if(id.match(frame)) {
			var texture = PIXI.Texture.fromFrame(frame);
			tex.push(texture);
			if(util_Asset._prepared.indexOf(texture.baseTexture) == -1) {
				util_Asset._prepared.push(texture.baseTexture);
				Main.instance.renderer.plugins.prepare.upload(texture.baseTexture);
			}
		}
	}
	return tex;
};
util_Asset.prototype = {
	__class__: util_Asset
};
var util_BrowserDetect = function() {
};
util_BrowserDetect.__name__ = true;
util_BrowserDetect.init = function() {
	util_BrowserDetect.browser = util_BrowserDetect.searchString(util_BrowserDetect.dataBrowser);
	var versionUserAgentResult = Std.string(util_BrowserDetect.searchVersion(window.navigator.userAgent));
	if(versionUserAgentResult == null) {
		var versionAppResult = Std.string(util_BrowserDetect.searchVersion(window.navigator.appVersion));
		if(versionAppResult == null) {
			util_BrowserDetect.version = "An unkonwn version";
		} else {
			util_BrowserDetect.version = versionAppResult;
		}
	} else {
		util_BrowserDetect.version = versionUserAgentResult;
	}
	var dataOsFind = util_BrowserDetect.searchString(util_BrowserDetect.dataOS);
	util_BrowserDetect.OS = dataOsFind == null ? "an unkonwn OS" : dataOsFind;
};
util_BrowserDetect.searchString = function(data) {
	var _g1 = 0;
	var _g = data.length;
	while(_g1 < _g) {
		var i = _g1++;
		var dataString = data[i].string;
		var dataProp = data[i].prop;
		var versionResult = data[i].versionSearch;
		util_BrowserDetect.versionSearchString = versionResult == null ? data[i].identity : versionResult;
		if(dataString != null) {
			if(dataString.indexOf(data[i].subString) != -1) {
				return data[i].identity;
			}
		} else if(dataProp != null) {
			return data[i].identity;
		}
	}
	return null;
};
util_BrowserDetect.searchVersion = function(dataString) {
	var index = dataString.indexOf(util_BrowserDetect.versionSearchString);
	if(index == -1) {
		return null;
	}
	return parseFloat(dataString.substring(index + util_BrowserDetect.versionSearchString.length + 1));
};
util_BrowserDetect.getAndroidVersion = function() {
	var ua = window.navigator.userAgent.toLowerCase();
	var reg = new EReg("android\\s([0-9\\.]*)","");
	var match = reg.match(ua);
	if(match) {
		return reg.matched(1);
	} else {
		return "0";
	}
};
util_BrowserDetect.prototype = {
	__class__: util_BrowserDetect
};
var util_LoaderWrapper = $hx_exports["LW"] = function() {
	throw new js__$Boot_HaxeError("LoaderWrapper is static only.");
};
util_LoaderWrapper.__name__ = true;
util_LoaderWrapper.beforeSheetLoad = function() {
	return function(r,next) {
		if(r.name.indexOf("json_image") >= 0 && r.url.indexOf("?") == -1) {
			r.url += "?_=" + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(Config.VERSION));
		}
		next();
	};
};
util_LoaderWrapper.LOAD_ASSETS = function(assets,onComplete) {
	util_LoaderWrapper.onComplete = onComplete;
	util_LoaderWrapper.complete = false;
	if(util_LoaderWrapper.loader == null) {
		util_LoaderWrapper.loader = new PIXI.loaders.Loader();
		util_LoaderWrapper.loader.before(util_LoaderWrapper.beforeSheetLoad());
		util_Asset.init(util_LoaderWrapper.loader);
	}
	util_LoaderWrapper.totalCount = 0;
	util_LoaderWrapper.batches = [];
	var batchSize = 1;
	var _g1 = 0;
	var _g = assets.length;
	while(_g1 < _g) {
		var i = _g1++;
		var batchNumber = Math.floor(i / batchSize);
		if(util_LoaderWrapper.batches[batchNumber] == null) {
			util_LoaderWrapper.batches[batchNumber] = [];
		}
		var name = assets[i];
		util_LoaderWrapper.batches[batchNumber].push(name);
		if(batchNumber == 0) {
			util_LoaderWrapper.addLoad(name);
		}
		if(name.indexOf("img") >= 0 && HxOverrides.substr(name,name.length - 4,4) == "json") {
			util_LoaderWrapper.totalCount += 2;
		} else if(name.indexOf(".fnt") >= 0) {
			util_LoaderWrapper.totalCount += 2;
		} else {
			util_LoaderWrapper.totalCount++;
		}
	}
	util_LoaderWrapper.batches.shift();
	util_LoaderWrapper.loadCount = 0;
	util_LoaderWrapper.updateText();
	util_LoaderWrapper.loader.addListener("progress",function(e) {
		util_LoaderWrapper.loadCount++;
		util_LoaderWrapper.updateText();
	});
	util_LoaderWrapper.loader.addListener("complete",function(e1) {
		if(util_LoaderWrapper.batches.length == 0) {
			util_LoaderWrapper.imagesComplete = true;
			util_LoaderWrapper.assetLoaded();
		} else {
			var batch = util_LoaderWrapper.batches.shift();
			var _g2 = 0;
			while(_g2 < batch.length) {
				var name1 = batch[_g2];
				++_g2;
				util_LoaderWrapper.addLoad(name1);
			}
			util_LoaderWrapper.loader.load();
		}
	});
	util_LoaderWrapper.loader.load();
};
util_LoaderWrapper.addLoad = function(name) {
	var n = name;
	var index = n.indexOf("@");
	if(index >= 0) {
		n = HxOverrides.substr(n,0,index) + HxOverrides.substr(n,n.lastIndexOf("."),null);
	}
	util_LoaderWrapper.loader.add(n,name + "?_=" + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(Config.VERSION)));
};
util_LoaderWrapper.assetLoaded = function() {
	if(util_LoaderWrapper.imagesComplete && !util_LoaderWrapper.complete) {
		util_LoaderWrapper.complete = true;
		util_LoaderWrapper.onComplete();
	}
};
util_LoaderWrapper.updateText = function() {
	var other = Math.floor(util_LoaderWrapper.loadCount / util_LoaderWrapper.totalCount) * 100;
	window.document.getElementById("preload").innerHTML = "Loading: please wait a moment. ";
};
util_LoaderWrapper.handleSound = function() {
	sounds_Sounds.loadChange = util_LoaderWrapper.updateSoundText;
};
util_LoaderWrapper.updateSoundText = function(amount) {
	util_LoaderWrapper.updateText();
};
util_LoaderWrapper.prototype = {
	__class__: util_LoaderWrapper
};
var util_MathUtil = function() {
};
util_MathUtil.__name__ = true;
util_MathUtil.findLineIntersection = function(p1,p2,p3,p4) {
	var x12 = p1.x - p2.x;
	var x34 = p3.x - p4.x;
	var y12 = p1.y - p2.y;
	var y34 = p3.y - p4.y;
	var c = x12 * y34 - y12 * x34;
	if(Math.abs(c) < 0.01) {
		return null;
	} else {
		var a = p1.x * p2.y - p1.y * p2.x;
		var b = p3.x * p4.y - p3.y * p4.x;
		var x = (a * x34 - b * x12) / c;
		var y = (a * y34 - b * y12) / c;
		return new PIXI.Point(x,y);
	}
};
util_MathUtil.normalize = function(point) {
	var np = new PIXI.Point(point.x,point.y);
	var l = Math.sqrt(np.x * np.x + np.y * np.y);
	if(l == 0) {
		l = 1;
	}
	np.x /= l;
	np.y /= l;
	return np;
};
util_MathUtil.pointLength = function(point) {
	return Math.sqrt(point.x * point.x + point.y * point.y);
};
util_MathUtil.calculateArea = function(polygon) {
	var sum = 0;
	var _g1 = 0;
	var _g = polygon.length;
	while(_g1 < _g) {
		var i = _g1++;
		sum += polygon[i].x * polygon[(i + 1) % polygon.length].y - polygon[i].y * polygon[(i + 1) % polygon.length].x;
	}
	return Math.abs(sum / 2);
};
util_MathUtil.clipInput = function(k,arr) {
	if(k < 0) {
		k = 0;
	}
	if(k > arr.length - 1) {
		k = arr.length - 1;
	}
	return arr[k];
};
util_MathUtil.getTangent = function(k,factor,array) {
	return factor * (util_MathUtil.clipInput(k + 1,array) - util_MathUtil.clipInput(k - 1,array)) / 2;
};
util_MathUtil.cubicInterpolation = function(array,t,tangentFactor) {
	if(tangentFactor == null) {
		tangentFactor = 1;
	}
	var k = Math.floor(t);
	var m_0 = util_MathUtil.getTangent(k,tangentFactor,array);
	var m_1 = util_MathUtil.getTangent(k + 1,tangentFactor,array);
	var p_0 = util_MathUtil.clipInput(k,array);
	var p_1 = util_MathUtil.clipInput(k + 1,array);
	t -= k;
	var t2 = t * t;
	var t3 = t * t2;
	return (2 * t3 - 3 * t2 + 1) * p_0 + (t3 - 2 * t2 + t) * m_0 + (-2 * t3 + 3 * t2) * p_1 + (t3 - t2) * m_1;
};
util_MathUtil.shuffle = function(array,key) {
	var index;
	var result = [];
	var copy = array.slice(0);
	while(copy.length > 0) {
		if(!isNaN(key)) {
			index = key % copy.length;
		} else {
			index = Math.floor(Math.random() * copy.length);
		}
		result.push(copy[index]);
		copy.splice(index,1);
	}
	return result;
};
util_MathUtil.prototype = {
	__class__: util_MathUtil
};
var util_Pool = $hx_exports["util"]["Pool"] = function(size,constructor) {
	var this1 = new Array(size);
	this._pool = this1;
	this._index = 0;
	if(constructor != null) {
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			this._pool[i] = constructor();
		}
	}
};
util_Pool.__name__ = true;
util_Pool.prototype = {
	get_all: function() {
		return this._pool;
	}
	,addItem: function(item) {
		this._pool[this._index] = item;
		this._index = (this._index + 1) % this._pool.length;
	}
	,getNext: function() {
		this._index = (this._index + 1) % this._pool.length;
		return this._pool[this._index];
	}
	,__class__: util_Pool
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
Config.ASSETS = ["img/artmode.png","img/rescue.png","img/survival.png","img/rope.png","img/blast.png","img/powerup.png","img/logo.png"];
Config.VERSION = "1h jam template 0.1";
Config.GRAVITY = 0.1;
Config.LANG = "en";
Config.TEXTS = { "fi" : { }, "en" : { }};
controls_CircleRenderer.GAME_OVER = "gameover";
controls_CircleRenderer.WIDTH = 1024;
controls_CircleRenderer.HEIGHT = 1024;
controls_StartView.START = "start";
controls_StartView.MODE = "artmode";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
sounds_Sounds.totalSounds = 0;
sounds_Sounds.initok = false;
sounds_Sounds.soundsLoaded = 0;
sounds_Sounds.waitingForIOS = false;
sounds_Sounds.ingame = false;
util_Asset._init = false;
util_Asset._prepared = [];
util_BrowserDetect.dataBrowser = [{ string : window.navigator.userAgent, subString : "Windows Phone 10.0", identity : "WindowsPhone10Edge"},{ string : window.navigator.userAgent, subString : "Chrome", identity : "Chrome"},{ string : window.navigator.userAgent, subString : "OmniWeb", versionSearch : "OmniWeb/", identity : "OmniWeb"},{ string : window.navigator.vendor, subString : "Apple", identity : "Safari", versionSearch : "Version"},{ string : window.navigator.vendor, subString : "iCab", identity : "iCab"},{ string : window.navigator.vendor, subString : "KDE", identity : "Konqueror"},{ string : window.navigator.userAgent, subString : "Firefox", identity : "Firefox"},{ string : window.navigator.vendor, subString : "Camino", identity : "Camino"},{ string : window.navigator.userAgent, subString : "Netscape", identity : "Netscape"},{ string : window.navigator.userAgent, subString : "MSIE", identity : "Explorer", versionSearch : "MSIE"},{ string : window.navigator.userAgent, subString : "Trident", identity : "Explorer11", versionSearch : "MSIE"},{ string : window.navigator.userAgent, subString : "Gecko", identity : "Mozilla", versionSearch : "rv"},{ string : window.navigator.userAgent, subString : "Mozilla", identity : "Netscape", versionSearch : "Mozilla"},{ prop : window.navigator.vendor, identity : "Opera", versionSearch : "Version"}];
util_BrowserDetect.dataOS = [{ string : window.navigator.platform, subString : "Win", identity : "Windows"},{ string : window.navigator.platform, subString : "Mac", identity : "Mac"},{ string : window.navigator.userAgent, subString : "iPhone", identity : "iPhone/iPod"},{ string : window.navigator.platform, subString : "Linux", identity : "Linux"}];
util_LoaderWrapper.complete = false;
util_LoaderWrapper.loadCount = 0;
util_LoaderWrapper.totalCount = 0;
util_LoaderWrapper.fontLoadStarted = false;
util_LoaderWrapper.imagesComplete = false;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
