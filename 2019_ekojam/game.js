// Generated by Haxe 3.4.0
(function ($hx_exports, $global) { "use strict";
$hx_exports["util"] = $hx_exports["util"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Config = $hx_exports["Config"] = function() {
};
Config.__name__ = true;
Config.prototype = {
	__class__: Config
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = $hx_exports["Main"] = function() {
	this.tickListeners = [];
	Main.CO2Emissions = new haxe_ds_EnumValueMap();
	Main.CO2Emissions.set(controls_ItemType.ENERGY,40176);
	Main.CO2Emissions.set(controls_ItemType.FACTORY,4330);
	Main.CO2Emissions.set(controls_ItemType.FARM,198);
	Main.CO2Emissions.set(controls_ItemType.FOREST,-29841);
	Main.CO2Emissions.set(controls_ItemType.FARMINGLAND,7270);
	Main.CO2Emissions.set(controls_ItemType.GRASS,630);
	Main.CO2Emissions.set(controls_ItemType.BOMB,0);
	Main.CH4Emissions = new haxe_ds_EnumValueMap();
	Main.CH4Emissions.set(controls_ItemType.ENERGY,287);
	Main.CH4Emissions.set(controls_ItemType.FACTORY,0);
	Main.CH4Emissions.set(controls_ItemType.FARM,2552);
	Main.CH4Emissions.set(controls_ItemType.FOREST,846);
	Main.CH4Emissions.set(controls_ItemType.FARMINGLAND,0);
	Main.CH4Emissions.set(controls_ItemType.GRASS,0);
	Main.CH4Emissions.set(controls_ItemType.BOMB,0);
	Main.N2OEmissions = new haxe_ds_EnumValueMap();
	Main.N2OEmissions.set(controls_ItemType.ENERGY,559);
	Main.N2OEmissions.set(controls_ItemType.FACTORY,257);
	Main.N2OEmissions.set(controls_ItemType.FARM,3750);
	Main.N2OEmissions.set(controls_ItemType.FOREST,1997);
	Main.N2OEmissions.set(controls_ItemType.FARMINGLAND,7);
	Main.N2OEmissions.set(controls_ItemType.GRASS,1);
	Main.N2OEmissions.set(controls_ItemType.BOMB,0);
	Main.instance = this;
	console.log("new game");
	createjs.Ticker = null;
	util_LoaderWrapper.LOAD_ASSETS(Config.ASSETS,$bind(this,this.onAssetsLoaded));
	sounds_Sounds.initSounds();
};
Main.__name__ = true;
Main.main = function() {
	console.log("Main");
	$().ready(function() {
		new Main();
	});
};
Main.prototype = {
	onAssetsLoaded: function() {
		console.log("Assets loaded");
		window.document.getElementById("preload").remove();
		this.initializeRenderer();
		this.initializeControls();
		window.addEventListener("resize",$bind(this,this.onResize),false);
		window.addEventListener("orientationchange",$bind(this,this.onResize),false);
	}
	,onResize: function(event) {
		var _gthis = this;
		if(this.resizeTimer != null) {
			this.resizeTimer.stop();
		}
		this.resizeTimer = haxe_Timer.delay(function() {
			_gthis.mainContainer.visible = true;
			var size = _gthis.getGameSize();
			_gthis.renderer.resize(size.width,size.height);
			_gthis.mainstage.resize(size);
		},150);
	}
	,getGameSize: function() {
		return new PIXI.Rectangle(0,0,window.innerWidth,window.innerHeight);
	}
	,initializeRenderer: function() {
		var size = this.getGameSize();
		var options = { };
		options.autoResize = false;
		options.antialias = false;
		options.backgroundColor = 0;
		options.transparent = false;
		options.clearBeforeRender = true;
		options.preserveDrawingBuffer = false;
		options.roundPixels = false;
		options.resolution = 1.0;
		this.renderer = PIXI.autoDetectRenderer(size.width,size.height,options);
		window.document.getElementById("game").appendChild(this.renderer.view);
	}
	,initializeControls: function() {
		this.mainContainer = new PIXI.Container();
		this.mainstage = new controls_MainStage();
		this.mainContainer.addChild(this.mainstage);
		this.onResize(null);
		this.ticker = new PIXI.ticker.Ticker();
		this.ticker.start();
		this.ticker.add($bind(this,this.onTickerTick));
	}
	,onTickerTick: function() {
		var delta = this.ticker.deltaTime;
		createjs.Tween.tick(this.ticker.elapsedMS,false);
		var _g = 0;
		var _g1 = this.tickListeners;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t(delta);
		}
		this.renderer.render(this.mainContainer);
	}
	,__class__: Main
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var controls_Bar = function(title,color) {
	PIXI.Container.call(this);
	this.left = util_Asset.getImage("fill_edge.png",true);
	this.right = util_Asset.getImage("fill_edge.png",true);
	this.right.scale.x = -1;
	var ts = { };
	ts.fontFamily = "Impact";
	ts.fontSize = 30;
	ts.fill = 0;
	this.title = new PIXI.Text(title,ts);
	this.addChild(this.title);
	ts.fill = 16777215;
	ts.fontSize = 24;
	this.valText = new PIXI.Text("100",ts);
	this.valText.y = 2;
	this.left.x = 50;
	this.right.x = 300;
	this.bg = util_Asset.getImage("bar_fill.png",true);
	this.fill = util_Asset.getImage("bar_fill.png",true);
	this.bg.width = 190;
	this.bg.tint = color;
	this.bg.x = this.left.x + 32 - 2;
	this.fill.x = this.bg.x;
	this.fill.blendMode = PIXI.BLEND_MODES.ADD;
	this.fill.width = 0;
	this.addChild(this.bg);
	this.addChild(this.fill);
	this.addChild(this.left);
	this.addChild(this.right);
	this.addChild(this.valText);
	this.setValue(0);
};
controls_Bar.__name__ = true;
controls_Bar.__super__ = PIXI.Container;
controls_Bar.prototype = $extend(PIXI.Container.prototype,{
	setValue: function(val) {
		this.valText.text = Std.string(Math.round(val / 1000));
		this.valText.x = this.left.x + 32 + Math.round((this.bg.width - this.valText.width) / 2);
	}
	,__class__: controls_Bar
});
var controls_BounceItem = function(tex) {
	PIXI.Container.call(this);
	if(controls_BounceItem.points == null) {
		controls_BounceItem.points = [new PIXI.Point(50,100),new PIXI.Point(50,80),new PIXI.Point(50,60),new PIXI.Point(50,40),new PIXI.Point(50,20),new PIXI.Point(50,0)];
		Main.instance.tickListeners.push(controls_BounceItem.onTick);
	}
	tex.rotate = 6;
	this.rope = new PIXI.mesh.Rope(tex,controls_BounceItem.points);
	this.addChild(this.rope);
};
controls_BounceItem.__name__ = true;
controls_BounceItem.onTick = function(delta) {
	var t = new Date().getTime() / 400;
	var _g1 = 0;
	var _g = controls_BounceItem.points.length;
	while(_g1 < _g) {
		var i = _g1++;
		controls_BounceItem.points[i].x = 50 + Math.max(0,i - 1.75) * Math.sin(t + i / 4) * 2;
		controls_BounceItem.points[i].y = controls_BounceItem.baseY[i] + Math.max(0,i - 1.75) / 3 * Math.cos(t * 1.7 + i / 4) * 3;
	}
};
controls_BounceItem.__super__ = PIXI.Container;
controls_BounceItem.prototype = $extend(PIXI.Container.prototype,{
	__class__: controls_BounceItem
});
var controls_EndPopup = function() {
	PIXI.Container.call(this);
	this.bg = new PIXI.mesh.NineSlicePlane(util_Asset.getTexture("popup_bg.png",true),20,20,20,20);
	this.addChild(this.bg);
	this.bg.width = 400;
	this.bg.height = 400;
	var ts = { };
	ts.fontFamily = "Impact";
	ts.fontSize = 30;
	ts.fill = 0;
	this.title = new PIXI.Text("Well done!",ts);
	this.addChild(this.title);
	ts.fontSize = 18;
	ts.fill = 0;
	ts.wordWrap = true;
	ts.wordWrapWidth = 380;
	this.instruction = new PIXI.Text("Your colony is complete!\nPress replay to play again.",ts);
	this.addChild(this.instruction);
	this.title.y = 20;
	this.title.x = Math.round((400 - this.title.width) / 2);
	this.instruction.y = 70;
	this.instruction.x = Math.round((400 - this.instruction.width) / 2);
	ts.fontSize = 30;
	this.start = new PIXI.Text("Replay",ts);
	this.addChild(this.start);
	this.start.y = 344;
	this.start.x = Math.round((400 - this.start.width) / 2);
	this.start.interactive = true;
	this.start.buttonMode = true;
};
controls_EndPopup.__name__ = true;
controls_EndPopup.__super__ = PIXI.Container;
controls_EndPopup.prototype = $extend(PIXI.Container.prototype,{
	__class__: controls_EndPopup
});
var controls_GameGrid = function(ui) {
	this.currentTypeLevel = 0;
	this.nodes = [];
	PIXI.Container.call(this);
	this.ui = ui;
	this.initializeControls();
	this.interactiveChildren = false;
};
controls_GameGrid.__name__ = true;
controls_GameGrid.__super__ = PIXI.Container;
controls_GameGrid.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.grid = [];
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			this.grid[i] = [];
			var _g1 = 0;
			while(_g1 < 7) {
				var j = _g1++;
				var n = new controls_Node();
				n.gx = i;
				n.gy = j;
				n.x = i * 100;
				n.y = j * 100;
				n.interactive = true;
				n.buttonMode = true;
				n.addListener("click",$bind(this,this.onNodeClick));
				n.addListener("tap",$bind(this,this.onNodeClick));
				this.addChild(n);
				this.grid[i][j] = n;
				this.nodes.push(n);
			}
		}
		this.ui.storage.interactive = true;
		this.ui.storage.buttonMode = true;
		this.ui.storage.addListener("click",$bind(this,this.onStorageClick));
		this.ui.storage.addListener("tap",$bind(this,this.onStorageClick));
		this.ui.next.interactive = true;
		this.ui.next.buttonMode = true;
		this.ui.next.addListener("click",$bind(this,this.onNextClick));
		this.ui.next.addListener("tap",$bind(this,this.onNextClick));
	}
	,onNextClick: function(e) {
		this.ui.storage.selection.alpha = 0;
		this.ui.next.selection.alpha = 0.5;
		this.updateEnabled();
	}
	,onStorageClick: function(e) {
		if(this.ui.storage.item == null) {
			this.ui.storage.setItem(this.currentType,this.currentTypeLevel);
			this.randomizeNext();
		} else {
			this.ui.next.selection.alpha = 0.0;
			this.ui.storage.selection.alpha = 0.5;
			this.updateEnabled();
		}
	}
	,updateEnabled: function() {
		var _g = 0;
		var _g1 = this.nodes;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			n.interactive = false;
			if(this.ui.storage.selection.alpha > 0) {
				if(n.item == null && this.ui.storage.item.type != controls_ItemType.BOMB) {
					n.interactive = true;
				} else if(n.item != null && this.ui.storage.item.type == controls_ItemType.BOMB) {
					n.interactive = true;
				}
			} else if(n.item == null && this.currentType != controls_ItemType.BOMB) {
				n.interactive = true;
			} else if(n.item != null && this.currentType == controls_ItemType.BOMB) {
				n.interactive = true;
			}
		}
	}
	,onNodeClick: function(e) {
		var node = e.target;
		if(node.interactive) {
			node.interactive = false;
			if(this.ui.storage.selection.alpha > 0) {
				node.setItem(this.ui.storage.item.type,this.ui.storage.item.level);
				this.ui.storage.removeItem();
				this.ui.storage.selection.alpha = 0;
				this.ui.next.selection.alpha = 0.5;
				this.checkCombine(node,false);
			} else {
				node.setItem(this.currentType,this.currentTypeLevel);
				this.checkCombine(node,true);
			}
		}
	}
	,getNode: function(x,y) {
		if(x >= 0 && x < this.grid.length && y >= 0 && y < this.grid[x].length) {
			return this.grid[x][y];
		}
		return null;
	}
	,checkCombine: function(node,updateNext) {
		var _gthis = this;
		if(node.item == null) {
			this.interactiveChildren = true;
			if(updateNext) {
				this.randomizeNext();
			}
			this.updateEmissions();
			return;
		}
		var same = [];
		var nearBy;
		var toSearch = [node];
		var searched = [node];
		while(true) {
			var search = toSearch.shift();
			nearBy = [this.getNode(search.gx - 1,search.gy),this.getNode(search.gx + 1,search.gy),this.getNode(search.gx,search.gy - 1),this.getNode(search.gx,search.gy + 1)];
			nearBy = nearBy.filter(function(n) {
				if(n != null && n.item != null && n.item.type == node.item.type && n.item.level == node.item.level && n != node) {
					return same.indexOf(n) == -1;
				} else {
					return false;
				}
			});
			var _g = 0;
			while(_g < nearBy.length) {
				var n1 = nearBy[_g];
				++_g;
				if(searched.indexOf(n1) == -1) {
					toSearch.push(n1);
				}
				searched.push(n1);
				same.push(n1);
			}
			if(!(toSearch.length > 0)) {
				break;
			}
		}
		if(same.length >= 2) {
			this.interactiveChildren = false;
			node.item.updateLevel(node.item.level + 1);
			var _g1 = 0;
			while(_g1 < same.length) {
				var n2 = same[_g1];
				++_g1;
				n2.removeItem();
				n2.interactive = true;
			}
			haxe_Timer.delay(function() {
				_gthis.checkCombine(node,updateNext);
			},150);
		} else {
			this.interactiveChildren = true;
			if(updateNext) {
				this.randomizeNext();
			}
			this.updateEmissions();
		}
	}
	,updateEmissions: function() {
		var co2 = 0;
		var ch4 = 0;
		var n2o = 0;
		var _g = 0;
		var _g1 = this.nodes;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(n.item != null) {
				if(Main.CO2Emissions.get(n.item.type) > 0) {
					co2 += Main.CO2Emissions.get(n.item.type) * Math.log(n.item.level + 2);
				} else {
					co2 += Main.CO2Emissions.get(n.item.type) * (n.item.level + 1);
				}
				if(Main.CH4Emissions.get(n.item.type) > 0) {
					ch4 += Main.CH4Emissions.get(n.item.type) * Math.log(n.item.level + 2);
				} else {
					ch4 += Main.CH4Emissions.get(n.item.type) * (n.item.level + 1);
				}
				if(Main.N2OEmissions.get(n.item.type) > 0) {
					n2o += Main.N2OEmissions.get(n.item.type) * Math.log(n.item.level + 2);
				} else {
					n2o += Main.N2OEmissions.get(n.item.type) * (n.item.level + 1);
				}
			}
		}
		this.ui.scores.co2.setValue(co2);
		this.ui.scores.ch4.setValue(ch4);
		this.ui.scores.n2o.setValue(n2o);
	}
	,start: function() {
		var _g = 0;
		var _g1 = this.nodes;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			n.removeItem();
			n.interactive = true;
		}
		this.updateEmissions();
		var n1 = Math.floor(Math.random() * 6);
		var blank = this.nodes.slice(0);
		var _g11 = 0;
		while(_g11 < n1) {
			++_g11;
			this.randomizeNext(true);
			blank[Math.floor(Math.random() * blank.length)].setItem(this.currentType,this.currentTypeLevel);
		}
		this.ui.next.selection.alpha = 0.5;
		this.ui.storage.removeItem();
		this.ui.storage.selection.alpha = 0;
		this.ui.interactiveChildren = true;
		this.interactiveChildren = true;
		this.randomizeNext();
	}
	,randomizeNext: function(ignoreAdd) {
		var typeCount = new haxe_ds_EnumValueMap();
		var chance = new haxe_ds_EnumValueMap();
		chance.set(controls_ItemType.ENERGY,1);
		chance.set(controls_ItemType.FACTORY,1);
		chance.set(controls_ItemType.FARM,1);
		chance.set(controls_ItemType.FARMINGLAND,1);
		chance.set(controls_ItemType.FOREST,1);
		chance.set(controls_ItemType.GRASS,1);
		var total = 0;
		var avgLevel = 0;
		var _g = 0;
		var _g1 = this.nodes;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(n.item != null) {
				if(typeCount.exists(n.item.type)) {
					typeCount.set(n.item.type,typeCount.get(n.item.type) + 1);
				} else {
					typeCount.set(n.item.type,1);
				}
				avgLevel += n.item.level;
				++total;
			}
		}
		chance.set(controls_ItemType.BOMB,total < 10 ? 0 : (total - 10) / 50);
		if(total == 0) {
			avgLevel = 0;
		} else {
			avgLevel /= total;
		}
		var type = typeCount.keys();
		while(type.hasNext()) {
			var type1 = type.next();
			chance.set(type1,chance.get(type1) / 2);
		}
		var totalChance = 0;
		var type2 = chance.keys();
		while(type2.hasNext()) totalChance += chance.get(type2.next());
		console.log("total chance: " + totalChance);
		var rnd = Math.random() * totalChance;
		totalChance = 0;
		var type3 = chance.keys();
		while(type3.hasNext()) {
			var type4 = type3.next();
			this.currentType = type4;
			totalChance += chance.get(type4);
			if(rnd < totalChance) {
				break;
			}
		}
		this.currentTypeLevel = Math.floor(Math.random() * Math.random() * (avgLevel + 1));
		this.ui.next.removeItem();
		if(!ignoreAdd) {
			this.ui.next.setItem(this.currentType,this.currentTypeLevel);
		}
		var allOccupied = true;
		var _g2 = 0;
		var _g11 = this.nodes;
		while(_g2 < _g11.length) {
			var n1 = _g11[_g2];
			++_g2;
			if(n1.item == null) {
				allOccupied = false;
				break;
			}
		}
		if(this.ui.next.item != null && this.ui.next.item.type == controls_ItemType.BOMB || this.ui.storage.item != null && this.ui.storage.item.type == controls_ItemType.BOMB) {
			allOccupied = false;
		}
		this.updateEnabled();
		if(allOccupied) {
			this.interactiveChildren = false;
			this.emit(controls_GameGrid.GAME_OVER);
		}
	}
	,__class__: controls_GameGrid
});
var controls_ItemType = { __ename__ : true, __constructs__ : ["BOMB","ENERGY","FACTORY","FARM","FARMINGLAND","FOREST","GRASS","DECORATION"] };
controls_ItemType.BOMB = ["BOMB",0];
controls_ItemType.BOMB.toString = $estr;
controls_ItemType.BOMB.__enum__ = controls_ItemType;
controls_ItemType.ENERGY = ["ENERGY",1];
controls_ItemType.ENERGY.toString = $estr;
controls_ItemType.ENERGY.__enum__ = controls_ItemType;
controls_ItemType.FACTORY = ["FACTORY",2];
controls_ItemType.FACTORY.toString = $estr;
controls_ItemType.FACTORY.__enum__ = controls_ItemType;
controls_ItemType.FARM = ["FARM",3];
controls_ItemType.FARM.toString = $estr;
controls_ItemType.FARM.__enum__ = controls_ItemType;
controls_ItemType.FARMINGLAND = ["FARMINGLAND",4];
controls_ItemType.FARMINGLAND.toString = $estr;
controls_ItemType.FARMINGLAND.__enum__ = controls_ItemType;
controls_ItemType.FOREST = ["FOREST",5];
controls_ItemType.FOREST.toString = $estr;
controls_ItemType.FOREST.__enum__ = controls_ItemType;
controls_ItemType.GRASS = ["GRASS",6];
controls_ItemType.GRASS.toString = $estr;
controls_ItemType.GRASS.__enum__ = controls_ItemType;
controls_ItemType.DECORATION = ["DECORATION",7];
controls_ItemType.DECORATION.toString = $estr;
controls_ItemType.DECORATION.__enum__ = controls_ItemType;
var controls_Item = function() {
	this.level = 0;
	PIXI.Container.call(this);
	this.container = new PIXI.Container();
	this.pivot.x = 50;
	this.pivot.y = 80;
	this.addChild(this.container);
};
controls_Item.__name__ = true;
controls_Item.__super__ = PIXI.Container;
controls_Item.prototype = $extend(PIXI.Container.prototype,{
	updateLevel: function(to) {
		this.level = to;
	}
	,__class__: controls_Item
});
var controls_ItemBomb = function() {
	controls_Item.call(this);
	this.sprite1 = util_Asset.getImage("clear.png",true);
	this.type = controls_ItemType.BOMB;
	this.container.addChild(this.sprite1);
};
controls_ItemBomb.__name__ = true;
controls_ItemBomb.__super__ = controls_Item;
controls_ItemBomb.prototype = $extend(controls_Item.prototype,{
	updateLevel: function(to) {
		controls_Item.prototype.updateLevel.call(this,to);
	}
	,__class__: controls_ItemBomb
});
var controls_ItemDecoration = function() {
	controls_Item.call(this);
	this.type = controls_ItemType.DECORATION;
};
controls_ItemDecoration.__name__ = true;
controls_ItemDecoration.__super__ = controls_Item;
controls_ItemDecoration.prototype = $extend(controls_Item.prototype,{
	__class__: controls_ItemDecoration
});
var controls_ItemEnergy = function() {
	controls_Item.call(this);
	this.sprite1 = new controls_BounceItem(util_Asset.getTexture("powerplant.png",true));
	this.sprite2 = new controls_BounceItem(util_Asset.getTexture("powerplant.png",true));
	this.sprite3 = new controls_BounceItem(util_Asset.getTexture("powerplant.png",true));
	this.sprite4 = new controls_BounceItem(util_Asset.getTexture("powerplant.png",true));
	this.type = controls_ItemType.ENERGY;
	this.container.addChild(this.sprite2);
	this.container.addChild(this.sprite3);
	this.container.addChild(this.sprite4);
	this.container.addChild(this.sprite1);
	this.sprite2.x = -14;
	this.sprite2.y = -15;
	this.sprite2.scale.set(0.8,0.8);
	this.sprite3.x = 30;
	this.sprite3.y = -20;
	this.sprite3.scale.set(0.7,0.7);
	this.sprite4.x = 40;
	this.sprite4.y = -5;
	this.sprite4.scale.set(0.77,0.77);
};
controls_ItemEnergy.__name__ = true;
controls_ItemEnergy.__super__ = controls_Item;
controls_ItemEnergy.prototype = $extend(controls_Item.prototype,{
	updateLevel: function(to) {
		controls_Item.prototype.updateLevel.call(this,to);
		this.sprite1.visible = true;
		this.sprite2.visible = to >= 1;
		this.sprite3.visible = to >= 2;
		this.sprite4.visible = to >= 3;
	}
	,__class__: controls_ItemEnergy
});
var controls_ItemFactory = function() {
	controls_Item.call(this);
	this.sprite1 = new controls_BounceItem(util_Asset.getTexture("factory.png",true));
	this.sprite2 = new controls_BounceItem(util_Asset.getTexture("factory.png",true));
	this.sprite3 = new controls_BounceItem(util_Asset.getTexture("factory.png",true));
	this.sprite4 = new controls_BounceItem(util_Asset.getTexture("factory.png",true));
	this.type = controls_ItemType.FACTORY;
	this.container.addChild(this.sprite2);
	this.container.addChild(this.sprite3);
	this.container.addChild(this.sprite4);
	this.container.addChild(this.sprite1);
	this.sprite2.x = -10;
	this.sprite2.y = -15;
	this.sprite2.scale.set(0.8,0.8);
	this.sprite3.x = 20;
	this.sprite3.y = -20;
	this.sprite3.scale.set(0.7,0.7);
	this.sprite4.x = 30;
	this.sprite4.y = -5;
	this.sprite4.scale.set(0.77,0.77);
};
controls_ItemFactory.__name__ = true;
controls_ItemFactory.__super__ = controls_Item;
controls_ItemFactory.prototype = $extend(controls_Item.prototype,{
	updateLevel: function(to) {
		controls_Item.prototype.updateLevel.call(this,to);
		this.sprite1.visible = true;
		this.sprite2.visible = to >= 1;
		this.sprite3.visible = to >= 2;
		this.sprite4.visible = to >= 3;
	}
	,__class__: controls_ItemFactory
});
var controls_ItemFarm = function() {
	controls_Item.call(this);
	this.sprite1 = new controls_BounceItem(util_Asset.getTexture("farm.png",true));
	this.sprite2 = new controls_BounceItem(util_Asset.getTexture("farm.png",true));
	this.sprite3 = new controls_BounceItem(util_Asset.getTexture("farm.png",true));
	this.sprite4 = new controls_BounceItem(util_Asset.getTexture("farm.png",true));
	this.type = controls_ItemType.FARM;
	this.container.addChild(this.sprite2);
	this.container.addChild(this.sprite3);
	this.container.addChild(this.sprite4);
	this.container.addChild(this.sprite1);
	this.sprite2.x = -10;
	this.sprite2.y = -15;
	this.sprite2.scale.set(0.8,0.8);
	this.sprite3.x = 20;
	this.sprite3.y = -20;
	this.sprite3.scale.set(0.7,0.7);
	this.sprite4.x = 30;
	this.sprite4.y = -5;
	this.sprite4.scale.set(0.77,0.77);
};
controls_ItemFarm.__name__ = true;
controls_ItemFarm.__super__ = controls_Item;
controls_ItemFarm.prototype = $extend(controls_Item.prototype,{
	updateLevel: function(to) {
		controls_Item.prototype.updateLevel.call(this,to);
		this.sprite1.visible = true;
		this.sprite2.visible = to >= 1;
		this.sprite3.visible = to >= 2;
		this.sprite4.visible = to >= 3;
	}
	,__class__: controls_ItemFarm
});
var controls_ItemFarmingLand = function() {
	controls_Item.call(this);
	this.sprite1 = new controls_BounceItem(util_Asset.getTexture("farmland.png",true));
	this.sprite2 = new controls_BounceItem(util_Asset.getTexture("farmland.png",true));
	this.sprite3 = new controls_BounceItem(util_Asset.getTexture("farmland.png",true));
	this.sprite4 = new controls_BounceItem(util_Asset.getTexture("farmland.png",true));
	this.type = controls_ItemType.FARMINGLAND;
	this.container.addChild(this.sprite3);
	this.container.addChild(this.sprite4);
	this.container.addChild(this.sprite2);
	this.container.addChild(this.sprite1);
	this.sprite2.x = -3;
	this.sprite2.y = 0;
	this.sprite2.scale.set(0.6,0.6);
	this.sprite3.x = 40;
	this.sprite3.y = -15;
	this.sprite3.scale.set(0.4,0.4);
	this.sprite4.x = 40;
	this.sprite4.y = -7;
	this.sprite4.scale.set(0.6,0.6);
};
controls_ItemFarmingLand.__name__ = true;
controls_ItemFarmingLand.__super__ = controls_Item;
controls_ItemFarmingLand.prototype = $extend(controls_Item.prototype,{
	updateLevel: function(to) {
		controls_Item.prototype.updateLevel.call(this,to);
		this.sprite1.visible = true;
		this.sprite2.visible = to >= 1;
		this.sprite3.visible = to >= 2;
		this.sprite4.visible = to >= 3;
	}
	,__class__: controls_ItemFarmingLand
});
var controls_ItemForest = function() {
	controls_Item.call(this);
	this.sprite1 = new controls_BounceItem(util_Asset.getTexture("forest.png",true));
	this.sprite2 = new controls_BounceItem(util_Asset.getTexture("forest.png",true));
	this.sprite3 = new controls_BounceItem(util_Asset.getTexture("forest.png",true));
	this.sprite4 = new controls_BounceItem(util_Asset.getTexture("forest.png",true));
	this.type = controls_ItemType.FOREST;
	this.container.addChild(this.sprite2);
	this.container.addChild(this.sprite3);
	this.container.addChild(this.sprite4);
	this.container.addChild(this.sprite1);
	this.sprite2.x = -14;
	this.sprite2.y = -15;
	this.sprite2.scale.set(0.8,0.8);
	this.sprite3.x = 30;
	this.sprite3.y = -20;
	this.sprite3.scale.set(0.7,0.7);
	this.sprite4.x = 40;
	this.sprite4.y = -5;
	this.sprite4.scale.set(0.77,0.77);
};
controls_ItemForest.__name__ = true;
controls_ItemForest.__super__ = controls_Item;
controls_ItemForest.prototype = $extend(controls_Item.prototype,{
	updateLevel: function(to) {
		controls_Item.prototype.updateLevel.call(this,to);
		this.sprite1.visible = true;
		this.sprite2.visible = to >= 1;
		this.sprite3.visible = to >= 2;
		this.sprite4.visible = to >= 3;
	}
	,__class__: controls_ItemForest
});
var controls_ItemGrass = function() {
	controls_Item.call(this);
	this.sprite1 = new controls_BounceItem(util_Asset.getTexture("grass.png",true));
	this.sprite2 = new controls_BounceItem(util_Asset.getTexture("grass.png",true));
	this.sprite3 = new controls_BounceItem(util_Asset.getTexture("grass.png",true));
	this.sprite4 = new controls_BounceItem(util_Asset.getTexture("grass.png",true));
	this.type = controls_ItemType.GRASS;
	this.container.addChild(this.sprite3);
	this.container.addChild(this.sprite4);
	this.container.addChild(this.sprite2);
	this.container.addChild(this.sprite1);
	this.sprite2.x = -3;
	this.sprite2.y = 0;
	this.sprite2.scale.set(0.6,0.6);
	this.sprite3.x = 40;
	this.sprite3.y = -15;
	this.sprite3.scale.set(0.4,0.4);
	this.sprite4.x = 40;
	this.sprite4.y = -7;
	this.sprite4.scale.set(0.6,0.6);
};
controls_ItemGrass.__name__ = true;
controls_ItemGrass.__super__ = controls_Item;
controls_ItemGrass.prototype = $extend(controls_Item.prototype,{
	updateLevel: function(to) {
		controls_Item.prototype.updateLevel.call(this,to);
		this.sprite1.visible = true;
		this.sprite2.visible = to >= 1;
		this.sprite3.visible = to >= 2;
		this.sprite4.visible = to >= 3;
	}
	,__class__: controls_ItemGrass
});
var controls_MainStage = function() {
	PIXI.Container.call(this);
	this.initializeControls();
};
controls_MainStage.__name__ = true;
controls_MainStage.__super__ = PIXI.Container;
controls_MainStage.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.gameArea = new PIXI.Container();
		this.bg = new PIXI.extras.TilingSprite(util_Asset.getTexture("tile.png",true),100,100);
		this.bg.tileScale.set(3,3);
		this.addChild(this.bg);
		this.ui = new controls_UI();
		this.ui.interactiveChildren = false;
		this.grid = new controls_GameGrid(this.ui);
		this.gameArea.addChild(this.grid);
		this.gameArea.addChild(this.ui);
		this.grid.y = 130;
		this.grid.addListener(controls_GameGrid.GAME_OVER,$bind(this,this.ongameover));
		this.startPopup = new controls_StartPopup();
		this.endPopup = new controls_EndPopup();
		this.endPopup.visible = false;
		this.addChild(this.gameArea);
		this.addChild(this.startPopup);
		this.addChild(this.endPopup);
		this.startPopup.interactive = true;
		this.startPopup.start.addListener("click",$bind(this,this.onstartClick));
		this.startPopup.start.addListener("tap",$bind(this,this.onstartClick));
		this.endPopup.start.addListener("click",$bind(this,this.onstartClick));
		this.endPopup.start.addListener("tap",$bind(this,this.onstartClick));
	}
	,onstartClick: function() {
		this.startPopup.interactive = false;
		createjs.Tween.get(this.startPopup.pivot).to({ y : 400},500,createjs.Ease.backIn);
		createjs.Tween.get(this.startPopup).wait(300,true).to({ alpha : 0},200,createjs.Ease.quadInOut).set({ visible : false}).call(($_=this.grid,$bind($_,$_.start)));
		this.endPopup.interactive = false;
		createjs.Tween.get(this.endPopup.pivot).to({ y : 400},500,createjs.Ease.backIn);
		createjs.Tween.get(this.endPopup).wait(300,true).to({ alpha : 0},200,createjs.Ease.quadInOut).set({ visible : false});
	}
	,resize: function(size) {
		this.bg.width = size.width;
		this.bg.height = size.height;
		this.gameArea.scale.set(1,1);
		var s = Math.min((size.width - 100) / this.gameArea.width,(size.height - 80) / this.gameArea.height);
		this.gameArea.scale.set(s,s);
		this.gameArea.x = Math.round((size.width - this.gameArea.width) / 2);
		this.gameArea.y = Math.round((size.height - this.gameArea.height) / 2);
		var ps = Math.min(1,Math.min(size.width / 500,size.height / 500));
		this.endPopup.scale.set(ps,ps);
		this.startPopup.scale.set(ps,ps);
		this.endPopup.x = Math.round((size.width - this.endPopup.width) / 2);
		this.endPopup.y = Math.round((size.height - this.endPopup.height) / 2);
		this.startPopup.x = Math.round((size.width - this.startPopup.width) / 2);
		this.startPopup.y = Math.round((size.height - this.startPopup.height) / 2);
	}
	,ongameover: function() {
		this.ui.interactiveChildren = false;
		this.grid.interactiveChildren = false;
		this.endPopup.interactive = false;
		this.endPopup.visible = true;
		this.endPopup.pivot.y = 400;
		this.endPopup.alpha = 0;
		createjs.Tween.get(this.endPopup.pivot).to({ y : 0},500,createjs.Ease.backOut);
		createjs.Tween.get(this.endPopup).to({ alpha : 1},200,createjs.Ease.quadInOut);
	}
	,__class__: controls_MainStage
});
var controls_Node = function() {
	this.isNextIndicator = false;
	PIXI.Container.call(this);
	this.bg = new PIXI.Graphics();
	this.bg.beginFill(16777215,0.0);
	this.bg.lineStyle(2,16777215,1);
	this.bg.drawRect(0,0,100,100);
	this.selection = new PIXI.Graphics();
	this.selection.beginFill(16777215,1.0);
	this.selection.drawRect(0,0,100,100);
	this.selection.alpha = 0;
	this.addChild(this.bg);
	this.addChild(this.selection);
};
controls_Node.__name__ = true;
controls_Node.__super__ = PIXI.Container;
controls_Node.prototype = $extend(PIXI.Container.prototype,{
	setItem: function(to,level) {
		if(to == controls_ItemType.BOMB && !this.isNextIndicator) {
			this.removeItem();
			return true;
		}
		if(this.item != null) {
			return false;
		}
		console.log("set item " + Std.string(to));
		this.item = null;
		if(to == controls_ItemType.ENERGY) {
			this.item = new controls_ItemEnergy();
		} else if(to == controls_ItemType.DECORATION) {
			this.item = new controls_ItemDecoration();
		} else if(to == controls_ItemType.FACTORY) {
			this.item = new controls_ItemFactory();
		} else if(to == controls_ItemType.FARM) {
			this.item = new controls_ItemFarm();
		} else if(to == controls_ItemType.FARMINGLAND) {
			this.item = new controls_ItemFarmingLand();
		} else if(to == controls_ItemType.FOREST) {
			this.item = new controls_ItemForest();
		} else if(to == controls_ItemType.GRASS) {
			this.item = new controls_ItemGrass();
		} else if(to == controls_ItemType.BOMB) {
			this.item = new controls_ItemBomb();
		}
		this.item.updateLevel(level);
		this.item.x = 50;
		this.item.y = 80;
		this.addChild(this.item);
		this.item.scale.set(0,0);
		createjs.Tween.get(this.item.scale).wait(250,true).to({ x : 1, y : 1},250,createjs.Ease.backOut);
		return true;
	}
	,removeItem: function() {
		var _gthis = this;
		if(this.item == null) {
			return;
		}
		console.log("remove item");
		var ti = this.item;
		this.item.scale.set(1,1);
		createjs.Tween.removeTweens(this.item.scale);
		createjs.Tween.get(this.item.scale).to({ x : 0, y : 0},250,createjs.Ease.backIn).call(function() {
			_gthis.removeChild(ti);
		});
		this.item = null;
	}
	,__class__: controls_Node
});
var controls_ScoreTable = function() {
	PIXI.Container.call(this);
	this.co2 = new controls_Bar("CO2",3158064);
	this.ch4 = new controls_Bar("CH4",7368816);
	this.n2o = new controls_Bar("N2O",12448);
	this.addChild(this.co2);
	this.addChild(this.ch4);
	this.addChild(this.n2o);
	this.ch4.y = 40;
	this.n2o.y = 80;
};
controls_ScoreTable.__name__ = true;
controls_ScoreTable.__super__ = PIXI.Container;
controls_ScoreTable.prototype = $extend(PIXI.Container.prototype,{
	__class__: controls_ScoreTable
});
var controls_StartPopup = function() {
	PIXI.Container.call(this);
	this.bg = new PIXI.mesh.NineSlicePlane(util_Asset.getTexture("popup_bg.png",true),20,20,20,20);
	this.addChild(this.bg);
	this.bg.width = 400;
	this.bg.height = 400;
	var ts = { };
	ts.fontFamily = "Impact";
	ts.fontSize = 30;
	ts.fill = 0;
	this.title = new PIXI.Text("Welcome!",ts);
	this.addChild(this.title);
	ts.fontSize = 18;
	ts.fill = 0;
	ts.wordWrap = true;
	ts.wordWrapWidth = 380;
	this.instruction = new PIXI.Text("Your goal is to place buildings, forests and farms down while trying to get as little emissions as possible.\n\n" + "Whenever three or more same type units are nearby, they combine into a more effective unit with better performance numbers.\n\n" + "Game ends when you cannot place anymore units. Use empty slot to store a unit temporarily.\n\nThis game has been made during Eko Game Jam 2019 and is inspired a lot by Triple town.",ts);
	this.addChild(this.instruction);
	this.title.y = 20;
	this.title.x = Math.round((400 - this.title.width) / 2);
	this.instruction.y = 70;
	this.instruction.x = Math.round((400 - this.instruction.width) / 2);
	ts.fontSize = 30;
	this.start = new PIXI.Text("Start",ts);
	this.addChild(this.start);
	this.start.y = 344;
	this.start.x = Math.round((400 - this.start.width) / 2);
	this.start.interactive = true;
	this.start.buttonMode = true;
};
controls_StartPopup.__name__ = true;
controls_StartPopup.__super__ = PIXI.Container;
controls_StartPopup.prototype = $extend(PIXI.Container.prototype,{
	__class__: controls_StartPopup
});
var controls_UI = function() {
	PIXI.Container.call(this);
	this.next = new controls_Node();
	this.next.x = 0;
	this.next.y = 0;
	this.addChild(this.next);
	this.storage = new controls_Node();
	this.storage.x = 110;
	this.storage.y = 0;
	this.addChild(this.storage);
	this.next.isNextIndicator = true;
	this.storage.isNextIndicator = true;
	this.scores = new controls_ScoreTable();
	this.addChild(this.scores);
	this.scores.x = 500 - this.scores.width + 22;
};
controls_UI.__name__ = true;
controls_UI.__super__ = PIXI.Container;
controls_UI.prototype = $extend(PIXI.Container.prototype,{
	__class__: controls_UI
});
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				s += fcc((c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127);
			} else {
				var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			return this.balance(this.setLoop(k,v,node.left),node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			if(_this2 == null) {
				tmp = 0;
			} else {
				tmp = _this2._height;
			}
		} else {
			var _this3 = this.right;
			if(_this3 == null) {
				tmp = 0;
			} else {
				tmp = _this3._height;
			}
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return (1 - (i >>> 31 << 1)) * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) this.a[_g1++] = 0;
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	new Uint8Array(result).set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var sounds_Sounds = $hx_exports["Sounds"] = function() { };
sounds_Sounds.__name__ = true;
sounds_Sounds.initSounds = function() {
	createjs.Sound.addEventListener("fileload",sounds_Sounds.soundLoadHandler);
	sounds_Sounds.loaded = [];
	sounds_Sounds.soundMap = new haxe_ds_StringMap();
	var base = "snd/";
	sounds_Sounds.sounds = [];
	var _g = 0;
	var _g1 = sounds_Sounds.sounds;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		createjs.Sound.registerSound(base + Std.string(s.s),s.s,s.c);
	}
	var iOS = new RegExp("iPad|iPhone|iPod").test(window.navigator.userAgent) && !window.MSStream;
	if(iOS) {
		sounds_Sounds.waitingForIOS = true;
		window.addEventListener("click",sounds_Sounds.handleInitClick,true);
		window.addEventListener("touchstart",sounds_Sounds.handleInitClick,true);
	}
	var hidden = null;
	var visibilityChange = null;
	if(window.document.hidden != null) {
		hidden = "hidden";
		visibilityChange = "visibilitychange";
	} else if(window.document.msHidden != null) {
		hidden = "msHidden";
		visibilityChange = "msvisibilitychange";
	} else if(window.document.webkitHidden != null) {
		hidden = "webkitHidden";
		visibilityChange = "webkitvisibilitychange";
	}
	window.document.addEventListener(visibilityChange,function() {
		if(Reflect.field(window.document,hidden)) {
			createjs.Sound.setMute(true);
		} else {
			createjs.Sound.setMute(false);
		}
	});
	sounds_Sounds.initok = true;
	sounds_Sounds.totalSounds = 0;
	return true;
};
sounds_Sounds.soundLoadHandler = function(e) {
	sounds_Sounds.soundsLoaded++;
	if(sounds_Sounds.loadChange != null) {
		sounds_Sounds.loadChange(sounds_Sounds.soundsLoaded);
	}
	if(e.id != null) {
		sounds_Sounds.loaded.push(e.id);
	}
	var tmp = e.id == sounds_Sounds.BACKGROUND && !createjs.Sound.getMute() && !sounds_Sounds.waitingForIOS && !sounds_Sounds.ingame;
	if(sounds_Sounds.soundsLoaded == sounds_Sounds.totalSounds && sounds_Sounds.loadedHandler != null) {
		sounds_Sounds.loadedHandler();
	}
};
sounds_Sounds.handleInitClick = function(event) {
	sounds_Sounds.waitingForIOS = false;
	window.removeEventListener("touchstart",sounds_Sounds.handleInitClick,true);
	window.removeEventListener("click",sounds_Sounds.handleInitClick,true);
	createjs.Sound.getMute();
};
sounds_Sounds.playEffect = function(name,loops,volume,delay) {
	if(!sounds_Sounds.soundRegistered(name)) {
		console.log("sound " + name + " not found");
	}
	if(!createjs.Sound.getMute() && sounds_Sounds.initok && sounds_Sounds.soundRegistered(name)) {
		if(volume == null) {
			volume = 1;
		}
		if(loops == null) {
			loops = 0;
		}
		if(delay == null) {
			delay = 0;
		}
		var _this = sounds_Sounds.soundMap;
		var value = createjs.Sound.play(name,{ delay : delay, interrupt : createjs.Sound.INTERRUPT_ANY, loop : loops, volume : volume});
		if(__map_reserved[name] != null) {
			_this.setReserved(name,value);
		} else {
			_this.h[name] = value;
		}
	}
	var _this1 = sounds_Sounds.soundMap;
	if(__map_reserved[name] != null) {
		return _this1.getReserved(name);
	} else {
		return _this1.h[name];
	}
};
sounds_Sounds.soundRegistered = function(name) {
	return Object.prototype.hasOwnProperty.call(createjs.Sound._idHash,name);
};
sounds_Sounds.stopSound = function(name) {
	var _this = sounds_Sounds.soundMap;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		var _this1 = sounds_Sounds.soundMap;
		(__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]).stop();
	}
};
sounds_Sounds.getSound = function(name) {
	var _this = sounds_Sounds.soundMap;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
sounds_Sounds.enableSounds = function() {
	if(createjs.Sound.getMute() && sounds_Sounds.initok) {
		createjs.Sound.setMute(false);
	}
};
sounds_Sounds.disableSounds = function() {
	createjs.Sound.setMute(true);
};
var util_Asset = $hx_exports["util"]["Asset"] = function() {
	throw new js__$Boot_HaxeError("Asset is static only.");
};
util_Asset.__name__ = true;
util_Asset.init = function(loader) {
	util_Asset._loader = loader;
};
util_Asset.getResource = function(name) {
	if(!Object.prototype.hasOwnProperty.call(util_Asset._loader.resources,name)) {
		console.log("Resource " + name + " not found!");
	}
	return Reflect.field(util_Asset._loader.resources,name);
};
util_Asset.getRawImage = function(name) {
	return util_Asset.getResource(name).data;
};
util_Asset.getTexture = function(name,fromSheet) {
	if(!fromSheet) {
		name = "img/" + name;
	}
	var tex = null;
	try {
		tex = PIXI.Texture.fromFrame(name);
	} catch( e ) {
		tex = PIXI.Texture.fromImage(name);
	}
	if(tex == null) {
		console.log("Warning: Asset " + name + " not found.");
	}
	if(tex != null && util_Asset._prepared.indexOf(tex.baseTexture) == -1) {
		util_Asset._prepared.push(tex.baseTexture);
		Main.instance.renderer.plugins.prepare.upload(tex.baseTexture);
	}
	return tex;
};
util_Asset.getImage = function(name,fromSheet) {
	if(!fromSheet) {
		name = "img/" + name;
	}
	var sprite = null;
	try {
		sprite = PIXI.Sprite.fromFrame(name);
	} catch( e ) {
		new PIXI.Sprite(PIXI.Texture.fromImage(name));
	}
	if(sprite == null) {
		console.log("Warning: Asset " + name + " not found.");
	}
	if(sprite != null && util_Asset._prepared.indexOf(sprite.texture.baseTexture) == -1) {
		util_Asset._prepared.push(sprite.texture.baseTexture);
		Main.instance.renderer.plugins.prepare.upload(sprite.texture.baseTexture);
	}
	return sprite;
};
util_Asset.getTexturesAndAnimations = function(json,id) {
	var tex = [];
	var anim = { };
	var ret = { textures : tex, animations : anim};
	var count = 0;
	var _g = 0;
	var _g1 = Reflect.fields(json.frames);
	while(_g < _g1.length) {
		var frame = _g1[_g];
		++_g;
		var split = frame.split("/");
		if(split[0] != id) {
			continue;
		}
		var animName = split[1];
		var texture = PIXI.Texture.fromFrame(frame);
		tex.push(texture);
		if(texture != null && util_Asset._prepared.indexOf(texture.baseTexture) == -1) {
			util_Asset._prepared.push(texture.baseTexture);
			Main.instance.renderer.plugins.prepare.upload(texture.baseTexture);
		}
		if(Object.prototype.hasOwnProperty.call(anim,animName)) {
			Reflect.field(anim,animName)[1] = count;
		} else {
			anim[animName] = [count,count];
		}
		++count;
	}
	return ret;
};
util_Asset.getTextures = function(json,id) {
	var tex = [];
	var _g = 0;
	var _g1 = Reflect.fields(json.frames);
	while(_g < _g1.length) {
		var frame = _g1[_g];
		++_g;
		if(id.match(frame)) {
			var texture = PIXI.Texture.fromFrame(frame);
			tex.push(texture);
			if(util_Asset._prepared.indexOf(texture.baseTexture) == -1) {
				util_Asset._prepared.push(texture.baseTexture);
				Main.instance.renderer.plugins.prepare.upload(texture.baseTexture);
			}
		}
	}
	return tex;
};
util_Asset.prototype = {
	__class__: util_Asset
};
var util_BrowserDetect = function() {
};
util_BrowserDetect.__name__ = true;
util_BrowserDetect.init = function() {
	util_BrowserDetect.browser = util_BrowserDetect.searchString(util_BrowserDetect.dataBrowser);
	var versionUserAgentResult = Std.string(util_BrowserDetect.searchVersion(window.navigator.userAgent));
	if(versionUserAgentResult == null) {
		var versionAppResult = Std.string(util_BrowserDetect.searchVersion(window.navigator.appVersion));
		if(versionAppResult == null) {
			util_BrowserDetect.version = "An unkonwn version";
		} else {
			util_BrowserDetect.version = versionAppResult;
		}
	} else {
		util_BrowserDetect.version = versionUserAgentResult;
	}
	var dataOsFind = util_BrowserDetect.searchString(util_BrowserDetect.dataOS);
	util_BrowserDetect.OS = dataOsFind == null ? "an unkonwn OS" : dataOsFind;
};
util_BrowserDetect.searchString = function(data) {
	var _g1 = 0;
	var _g = data.length;
	while(_g1 < _g) {
		var i = _g1++;
		var dataString = data[i].string;
		var dataProp = data[i].prop;
		var versionResult = data[i].versionSearch;
		util_BrowserDetect.versionSearchString = versionResult == null ? data[i].identity : versionResult;
		if(dataString != null) {
			if(dataString.indexOf(data[i].subString) != -1) {
				return data[i].identity;
			}
		} else if(dataProp != null) {
			return data[i].identity;
		}
	}
	return null;
};
util_BrowserDetect.searchVersion = function(dataString) {
	var index = dataString.indexOf(util_BrowserDetect.versionSearchString);
	if(index == -1) {
		return null;
	}
	return parseFloat(dataString.substring(index + util_BrowserDetect.versionSearchString.length + 1));
};
util_BrowserDetect.getAndroidVersion = function() {
	var ua = window.navigator.userAgent.toLowerCase();
	var reg = new EReg("android\\s([0-9\\.]*)","");
	if(reg.match(ua)) {
		return reg.matched(1);
	} else {
		return "0";
	}
};
util_BrowserDetect.prototype = {
	__class__: util_BrowserDetect
};
var util_LoaderWrapper = $hx_exports["LW"] = function() {
	throw new js__$Boot_HaxeError("LoaderWrapper is static only.");
};
util_LoaderWrapper.__name__ = true;
util_LoaderWrapper.beforeSheetLoad = function() {
	return function(r,next) {
		if(r.name.indexOf("json_image") >= 0 && r.url.indexOf("?") == -1) {
			r.url += "?_=" + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(Config.VERSION));
		}
		next();
	};
};
util_LoaderWrapper.LOAD_ASSETS = function(assets,onComplete) {
	util_LoaderWrapper.onComplete = onComplete;
	util_LoaderWrapper.complete = false;
	if(util_LoaderWrapper.loader == null) {
		util_LoaderWrapper.loader = new PIXI.loaders.Loader();
		util_LoaderWrapper.loader.before(util_LoaderWrapper.beforeSheetLoad());
		util_Asset.init(util_LoaderWrapper.loader);
	}
	util_LoaderWrapper.totalCount = 0;
	util_LoaderWrapper.batches = [];
	var _g1 = 0;
	var _g = assets.length;
	while(_g1 < _g) {
		var i = _g1++;
		var batchNumber = Math.floor(i / 1);
		if(util_LoaderWrapper.batches[batchNumber] == null) {
			util_LoaderWrapper.batches[batchNumber] = [];
		}
		var name = assets[i];
		util_LoaderWrapper.batches[batchNumber].push(name);
		if(batchNumber == 0) {
			util_LoaderWrapper.addLoad(name);
		}
		if(name.indexOf("img") >= 0 && HxOverrides.substr(name,name.length - 4,4) == "json") {
			util_LoaderWrapper.totalCount += 2;
		} else if(name.indexOf(".fnt") >= 0) {
			util_LoaderWrapper.totalCount += 2;
		} else {
			util_LoaderWrapper.totalCount++;
		}
	}
	util_LoaderWrapper.batches.shift();
	util_LoaderWrapper.loadCount = 0;
	util_LoaderWrapper.updateText();
	util_LoaderWrapper.loader.addListener("progress",function(e) {
		util_LoaderWrapper.loadCount++;
		util_LoaderWrapper.updateText();
	});
	util_LoaderWrapper.loader.addListener("complete",function(e1) {
		if(util_LoaderWrapper.batches.length == 0) {
			util_LoaderWrapper.imagesComplete = true;
			util_LoaderWrapper.assetLoaded();
		} else {
			var batch = util_LoaderWrapper.batches.shift();
			var _g2 = 0;
			while(_g2 < batch.length) {
				var name1 = batch[_g2];
				++_g2;
				util_LoaderWrapper.addLoad(name1);
			}
			util_LoaderWrapper.loader.load();
		}
	});
	util_LoaderWrapper.loader.load();
};
util_LoaderWrapper.addLoad = function(name) {
	var n = name;
	var index = name.indexOf("@");
	if(index >= 0) {
		n = HxOverrides.substr(name,0,index) + HxOverrides.substr(name,name.lastIndexOf("."),null);
	}
	util_LoaderWrapper.loader.add(n,name + "?_=" + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(Config.VERSION)));
};
util_LoaderWrapper.assetLoaded = function() {
	if(util_LoaderWrapper.imagesComplete && !util_LoaderWrapper.complete) {
		util_LoaderWrapper.complete = true;
		util_LoaderWrapper.onComplete();
	}
};
util_LoaderWrapper.updateText = function() {
	window.document.getElementById("preload").innerHTML = "Loading: please wait a moment. ";
};
util_LoaderWrapper.handleSound = function() {
	sounds_Sounds.loadChange = util_LoaderWrapper.updateSoundText;
};
util_LoaderWrapper.updateSoundText = function(amount) {
	util_LoaderWrapper.updateText();
};
util_LoaderWrapper.prototype = {
	__class__: util_LoaderWrapper
};
var util_Pool = $hx_exports["util"]["Pool"] = function(size,constructor) {
	this._pool = new Array(size);
	this._index = 0;
	if(constructor != null) {
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) this._pool[_g1++] = constructor();
	}
};
util_Pool.__name__ = true;
util_Pool.prototype = {
	get_all: function() {
		return this._pool;
	}
	,addItem: function(item) {
		this._pool[this._index] = item;
		this._index = (this._index + 1) % this._pool.length;
	}
	,getNext: function() {
		this._index = (this._index + 1) % this._pool.length;
		return this._pool[this._index];
	}
	,__class__: util_Pool
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
Config.ASSETS = ["img/ui.json"];
Config.VERSION = "0h game jam 2018";
controls_BounceItem.baseY = [100,80,60,40,20,0];
controls_GameGrid.GAME_OVER = "gameover";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
sounds_Sounds.bg_volume = 0.3;
sounds_Sounds.totalSounds = 0;
sounds_Sounds.initok = false;
sounds_Sounds.soundsLoaded = 0;
sounds_Sounds.waitingForIOS = false;
sounds_Sounds.ingame = false;
sounds_Sounds.musicvol = 0.3;
util_Asset._init = false;
util_Asset._prepared = [];
util_BrowserDetect.dataBrowser = [{ string : window.navigator.userAgent, subString : "Windows Phone 10.0", identity : "WindowsPhone10Edge"},{ string : window.navigator.userAgent, subString : "Chrome", identity : "Chrome"},{ string : window.navigator.userAgent, subString : "OmniWeb", versionSearch : "OmniWeb/", identity : "OmniWeb"},{ string : window.navigator.vendor, subString : "Apple", identity : "Safari", versionSearch : "Version"},{ string : window.navigator.vendor, subString : "iCab", identity : "iCab"},{ string : window.navigator.vendor, subString : "KDE", identity : "Konqueror"},{ string : window.navigator.userAgent, subString : "Firefox", identity : "Firefox"},{ string : window.navigator.vendor, subString : "Camino", identity : "Camino"},{ string : window.navigator.userAgent, subString : "Netscape", identity : "Netscape"},{ string : window.navigator.userAgent, subString : "MSIE", identity : "Explorer", versionSearch : "MSIE"},{ string : window.navigator.userAgent, subString : "Trident", identity : "Explorer11", versionSearch : "MSIE"},{ string : window.navigator.userAgent, subString : "Gecko", identity : "Mozilla", versionSearch : "rv"},{ string : window.navigator.userAgent, subString : "Mozilla", identity : "Netscape", versionSearch : "Mozilla"},{ prop : window.navigator.vendor, identity : "Opera", versionSearch : "Version"}];
util_BrowserDetect.dataOS = [{ string : window.navigator.platform, subString : "Win", identity : "Windows"},{ string : window.navigator.platform, subString : "Mac", identity : "Mac"},{ string : window.navigator.userAgent, subString : "iPhone", identity : "iPhone/iPod"},{ string : window.navigator.platform, subString : "Linux", identity : "Linux"}];
util_LoaderWrapper.complete = false;
util_LoaderWrapper.loadCount = 0;
util_LoaderWrapper.totalCount = 0;
util_LoaderWrapper.fontLoadStarted = false;
util_LoaderWrapper.imagesComplete = false;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
