// Generated by Haxe 3.4.7
(function ($hx_exports, $global) { "use strict";
$hx_exports["util"] = $hx_exports["util"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Config = $hx_exports["Config"] = function() {
};
Config.__name__ = true;
Config.prototype = {
	__class__: Config
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
var Main = $hx_exports["Game"] = function() {
	this.tickListeners = [];
	haxe_Log.trace("new game",{ fileName : "Main.hx", lineNumber : 81, className : "Main", methodName : "new"});
	createjs.Ticker = null;
	util_LoaderWrapper.LOAD_ASSETS(Config.ASSETS,$bind(this,this.onAssetsLoaded));
	sounds_Sounds.initSounds();
};
Main.__name__ = true;
Main.main = function() {
	haxe_Log.trace("Main",{ fileName : "Main.hx", lineNumber : 70, className : "Main", methodName : "main"});
	$().ready(function() {
		Main.instance = new Main();
	});
};
Main.prototype = {
	onAssetsLoaded: function() {
		logic_GridLogic.INIT();
		window.document.getElementById("preload").remove();
		this.initializeRenderer();
		this.initializeControls();
		window.addEventListener("resize",$bind(this,this.onResize),false);
		window.addEventListener("orientationchange",$bind(this,this.onResize),false);
	}
	,onResize: function(event) {
		var _gthis = this;
		if(this.resizeTimer != null) {
			this.resizeTimer.stop();
		}
		this.resizeTimer = haxe_Timer.delay(function() {
			var size = _gthis.getGameSize();
			_gthis.renderer.resize(size.width,size.height);
			_gthis.start.resize(size);
			_gthis.game.resize(size);
		},50);
	}
	,getGameSize: function() {
		return new PIXI.Rectangle(0,0,window.innerWidth,window.innerHeight);
	}
	,initializeRenderer: function() {
		var size = this.getGameSize();
		var options = { };
		options.autoResize = false;
		options.antialias = true;
		options.backgroundColor = 0;
		options.clearBeforeRender = true;
		options.preserveDrawingBuffer = false;
		options.roundPixels = false;
		this.renderer = PIXI.autoDetectRenderer(size.width,size.height,options);
		window.document.getElementById("game").appendChild(this.renderer.view);
	}
	,initializeControls: function() {
		particles_ParticleManager.init();
		this.mainContainer = new PIXI.Container();
		this.game = new controls_GameView();
		this.game.visible = false;
		this.start = new controls_StartView();
		this.mainContainer.addChild(this.start);
		this.mainContainer.addChild(this.game);
		this.mainContainer.addChild(particles_ParticleManager.particles);
		this.onResize(null);
		this.ticker = new PIXI.ticker.Ticker();
		this.ticker.start();
		this.ticker.add($bind(this,this.onTickerTick));
		this.start.start.addListener("click",$bind(this,this.onStartClick));
		this.start.start.addListener("tap",$bind(this,this.onStartClick));
		this.onStartClick();
	}
	,onStartClick: function() {
		var _gthis = this;
		sounds_Sounds.playEffect(sounds_Sounds.TOGGLE);
		this.start.interactiveChildren = false;
		this.start.visible = false;
		this.game.prepare();
		this.game.visible = true;
		haxe_Timer.delay(function() {
			_gthis.game.start();
		},500);
	}
	,replay: function() {
		this.start.interactiveChildren = true;
	}
	,onTickerTick: function() {
		var delta = this.ticker.deltaTime;
		createjs.Tween.tick(this.ticker.elapsedMS,false);
		var _g = 0;
		var _g1 = this.tickListeners;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t(delta);
		}
		this.renderer.render(this.mainContainer);
	}
	,__class__: Main
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var controls_Block = function() {
	this.active = false;
	PIXI.Container.call(this);
	this.initializeControls();
};
controls_Block.__name__ = true;
controls_Block.__super__ = PIXI.Container;
controls_Block.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		var colors = ["blue","green","orange","purple"];
		if(controls_Block.moveLeft.length == 0) {
			var _g = 0;
			while(_g < colors.length) {
				var color = colors[_g];
				++_g;
				var moveLeft = util_Asset.getTextures(util_Asset.getResource("img/block_" + color + ".json").data,new EReg("left/.*",""));
				var moveRight = util_Asset.getTextures(util_Asset.getResource("img/block_" + color + ".json").data,new EReg("right/.*",""));
				var moveTop = util_Asset.getTextures(util_Asset.getResource("img/block_" + color + ".json").data,new EReg("up/.*",""));
				var moveDown = util_Asset.getTextures(util_Asset.getResource("img/block_" + color + ".json").data,new EReg("down/.*",""));
				var death = util_Asset.getTextures(util_Asset.getResource("img/block_" + color + ".json").data,new EReg("death/.*",""));
				var defaultAnim = util_Asset.getTextures(util_Asset.getResource("img/block_" + color + ".json").data,new EReg("default/.*",""));
				var idle = util_Asset.getTextures(util_Asset.getResource("img/block_" + color + ".json").data,new EReg("idle/.*",""));
				controls_Block.moveLeft.push(moveLeft);
				controls_Block.moveRight.push(moveRight);
				controls_Block.moveTop.push(moveTop);
				controls_Block.moveDown.push(moveDown);
				controls_Block.death.push(death);
				controls_Block.defaultAnim.push(defaultAnim);
				controls_Block.idle.push(idle);
			}
		}
		this.textures = [util_Asset.getTexture("blockie_blue.png",true),util_Asset.getTexture("blockie_green.png",true),util_Asset.getTexture("blockie_orange.png",true),util_Asset.getTexture("blockie_purple.png",true)];
		this.bright = util_Asset.getImage("block_bright.png",true);
		this.sprite = new PIXI.extras.AnimatedSprite(controls_Block.moveLeft[0]);
		this.sprite.loop = true;
		this.sprite.gotoAndPlay(0);
		this.sprite.animationSpeed = 0.16666666666666666;
		this.sprite.anchor.x = this.sprite.anchor.y = 0.5;
		this.sprite.x = -6;
		this.sprite.y = -6;
		this.scale.x = this.scale.y = 0;
		this.bright.anchor = this.sprite.anchor;
		this.bright.position = this.sprite.position;
		this.bright.alpha = 0;
		this.sprite.width = this.sprite.height = controls_GridControl.BLOCK_HEIGHT - 60 / logic_GridLogic.GRID_HEIGHT;
		this.bright.width = this.bright.height = this.sprite.width;
		this.bright.blendMode = PIXI.BLEND_MODES.ADD;
		this.bright.alpha = 0.0;
		this.addChild(this.sprite);
		this.addChild(this.bright);
		this.interactive = true;
		this.addListener("click",$bind(this,this.onAnnoyClick));
	}
	,restartIdleTimer: function() {
		if(this.idleTimer != null) {
			this.idleTimer.stop();
		}
		this.idleTimer = new haxe_Timer(250 + Math.floor(Math.random() * 5000));
		this.idleTimer.run = $bind(this,this.onIdleTick);
	}
	,onIdleTick: function() {
		var _gthis = this;
		this.idleTimer.stop();
		if(this.prevValue >= 0 && this.prevValue < controls_Block.idle.length) {
			this.sprite.textures = controls_Block.idle[this.prevValue];
			this.sprite.loop = false;
			this.sprite.play();
			this.sprite.onComplete = function() {
				_gthis.sprite.onComplete = null;
				_gthis.sprite.textures = controls_Block.defaultAnim[_gthis.prevValue];
				_gthis.restartIdleTimer();
			};
		}
	}
	,onAnnoyClick: function() {
		var os = this.sprite.scale.x;
	}
	,sync: function(middleStep) {
		var _gthis = this;
		var value = this.node.value;
		if(this.active && this.node.value == -1) {
			particles_ParticleManager.squares.spawn(particles_ParticleManager.squares.toLocal(new PIXI.Point(),this),[255,65280,16776960,16777215][this.prevValue]);
			this.active = false;
			this.sprite.textures = controls_Block.death[this.prevValue];
			this.sprite.play();
			this.bright.visible = true;
			this.bright.alpha = 0.0;
			createjs.Tween.get(this.bright).to({ alpha : 0.5},150).to({ alpha : 0},50);
			createjs.Tween.removeTweens(this.scale);
			createjs.Tween.get(this.scale).wait(150,true).to({ x : 0, y : 0},250,createjs.Ease.quadIn);
		} else if(!this.active && this.node.value >= 0) {
			this.prevValue = this.node.value;
			this.sprite.textures = controls_Block.defaultAnim[value];
			this.sprite.tint = [255,65280,16776960,16777215][value];
			this.sprite.play();
			this.active = true;
			this.x = this.node.x * controls_GridControl.BLOCK_WIDTH + Math.max(0,this.node.x - 1) * controls_GridControl.SPACING + controls_GridControl.BLOCK_WIDTH / 2;
			this.y = this.node.y * controls_GridControl.BLOCK_HEIGHT + Math.max(0,this.node.y - 1) * controls_GridControl.SPACING + controls_GridControl.BLOCK_HEIGHT / 2;
			createjs.Tween.removeTweens(this.scale);
			var tmp = createjs.Tween.get(this.scale);
			var tmp1 = createjs.Ease.getBackOut(0.35);
			tmp.to({ x : 1, y : 1},250,tmp1).call($bind(this,this.restartIdleTimer));
		} else if(this.active) {
			this.sprite.textures = controls_Block.defaultAnim[value];
			this.sprite.tint = [255,65280,16776960,16777215][value];
			var tx = this.node.x * controls_GridControl.BLOCK_WIDTH + Math.max(0,this.node.x - 1) * controls_GridControl.SPACING + controls_GridControl.BLOCK_WIDTH / 2;
			var ty = this.node.y * controls_GridControl.BLOCK_HEIGHT + Math.max(0,this.node.y - 1) * controls_GridControl.SPACING + controls_GridControl.BLOCK_HEIGHT / 2;
			if(tx > this.x) {
				this.sprite.textures = controls_Block.moveLeft[value];
			} else if(tx < this.x) {
				this.sprite.textures = controls_Block.moveRight[value];
			} else if(ty > this.y) {
				this.sprite.textures = controls_Block.moveTop[value];
			} else if(ty < this.y) {
				this.sprite.textures = controls_Block.moveDown[value];
			}
			this.sprite.play();
			var dx = Math.abs(tx - this.x);
			var dy = Math.abs(ty - this.y);
			createjs.Tween.removeTweens(this);
			createjs.Tween.get(this).wait(middleStep ? 250 : 10).to({ x : tx, y : ty},350,createjs.Ease.bounceOut).call(function() {
				_gthis.sprite.textures = controls_Block.defaultAnim[value];
				_gthis.restartIdleTimer();
			});
		}
	}
	,__class__: controls_Block
});
var controls_GameView = $hx_exports["GV"] = function() {
	this._score = 0;
	PIXI.Container.call(this);
	this.initializeControls();
};
controls_GameView.__name__ = true;
controls_GameView.__super__ = PIXI.Container;
controls_GameView.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.bg = util_Asset.getImage("bg.jpg",false);
		this.control = new controls_GridControl();
		this.control.x = 640;
		this.control.y = 220;
		this.control.addListener(controls_GridControl.ON_BLOCK_REMOVE,$bind(this,this.onBlockRemove));
		this.score = new controls_Score();
		this.score.x = 640;
		this.score.y = 110;
		this.praises = new controls_PraiseManager();
		this.praises.x = this.control.x + Math.floor(controls_GridControl.BLOCK_WIDTH * logic_GridLogic.GRID_WIDTH / 2);
		this.praises.y = this.control.y + Math.floor(controls_GridControl.BLOCK_WIDTH * logic_GridLogic.GRID_WIDTH / 2);
		this.addChild(this.bg);
		this.addChild(this.control);
		this.addChild(this.score);
		this.addChild(this.praises);
	}
	,prepare: function() {
		this._score = 0;
		this.score.prepare();
		this.control.prepare();
	}
	,start: function() {
		this.control.enabled = true;
	}
	,onBlockRemove: function(count) {
		this._score += count;
		this.score.setScore(this._score);
	}
	,resize: function(size) {
		this.size = size;
		var s = Math.max(size.width / this.bg.width,size.height / this.bg.height);
		this.scale.x = this.scale.y = s;
		this.x = Math.round((size.width - this.bg.width * s) / 2);
		this.y = Math.round((size.height - this.bg.height * s) / 2);
		if(size.width > size.height) {
			this.y = 0;
		}
	}
	,__class__: controls_GameView
});
var controls_GridControl = function() {
	this.chains = 0;
	this.enabled = false;
	this.swipeDirection = new PIXI.Point(0.0,0.0);
	this.swipeStop = new PIXI.Point(0.0,0.0);
	this.swipeStart = new PIXI.Point(0.0,0.0);
	this.moves = 0;
	PIXI.Container.call(this);
	controls_GridControl.BLOCK_HEIGHT = Math.floor(780 / logic_GridLogic.GRID_HEIGHT);
	controls_GridControl.BLOCK_WIDTH = Math.floor(780 / logic_GridLogic.GRID_HEIGHT);
	this.initializeControls();
	window.addEventListener("keydown",$bind(this,this.keyDown));
	window.document.addEventListener("touchstart",$bind(this,this.touchDown));
	window.document.addEventListener("touchmove",$bind(this,this.touchUpdate));
	window.document.addEventListener("touchend",$bind(this,this.touchUp));
};
controls_GridControl.__name__ = true;
controls_GridControl.__super__ = PIXI.Container;
controls_GridControl.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.blockContainer = new PIXI.Container();
		this.blocks = [];
		this.grid = [];
		var _g1 = 0;
		var _g = logic_GridLogic.GRID_WIDTH;
		while(_g1 < _g) {
			var x = _g1++;
			this.grid[x] = [];
			var _g3 = 0;
			var _g2 = logic_GridLogic.GRID_HEIGHT;
			while(_g3 < _g2) {
				var y = _g3++;
				var b = new controls_Block();
				b.x = x * controls_GridControl.BLOCK_WIDTH + Math.max(0,x - 1) * controls_GridControl.SPACING + controls_GridControl.BLOCK_WIDTH / 2;
				b.y = y * controls_GridControl.BLOCK_HEIGHT + Math.max(0,y - 1) * controls_GridControl.SPACING + controls_GridControl.BLOCK_HEIGHT / 2;
				this.grid[x][y] = b;
				this.blocks.push(b);
				this.blockContainer.addChild(b);
			}
		}
		this.addChild(this.blockContainer);
		this.enabled = true;
	}
	,prepare: function() {
		this.logic = new logic_GridLogic();
		this.logic.spawnRandom();
		this.logic.spawnRandom();
		this.logic.spawnRandom();
		this.logic.printGrid();
		controls_GridControl.BLOCK_HEIGHT = Math.floor(6 / logic_GridLogic.GRID_HEIGHT * 130);
		controls_GridControl.BLOCK_WIDTH = Math.floor(6 / logic_GridLogic.GRID_WIDTH * 130);
		var _g1 = 0;
		var _g = logic_GridLogic.GRID_WIDTH;
		while(_g1 < _g) {
			var x = _g1++;
			var _g3 = 0;
			var _g2 = logic_GridLogic.GRID_HEIGHT;
			while(_g3 < _g2) {
				var y = _g3++;
				var b = this.grid[x][y];
				b.node = this.logic.grid[x][y];
			}
		}
		this.enabled = false;
		this.syncNodes(false);
	}
	,syncNodes: function(middleStep) {
		var _g = 0;
		var _g1 = this.blocks;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.sync(middleStep);
		}
	}
	,touchDown: function(eventData) {
		this.swipeStart.set(eventData.touches[0].pageX,eventData.touches[0].pageY);
	}
	,touchUpdate: function(eventData) {
		this.swipeStop.set(eventData.touches[0].pageX,eventData.touches[0].pageY);
	}
	,touchUp: function(eventData) {
		var diffX = Math.abs(this.swipeStart.x - this.swipeStop.x);
		var diffY = Math.abs(this.swipeStart.y - this.swipeStop.y);
		if(diffX < controls_GridControl.DEAD_ZONE && diffY < controls_GridControl.DEAD_ZONE || diffX > controls_GridControl.DEAD_ZONE && diffY > controls_GridControl.DEAD_ZONE) {
			return;
		}
		if(diffX > diffY) {
			if(this.swipeStart.x > this.swipeStop.x) {
				this.doSwipe(logic_Direction.left);
			} else {
				this.doSwipe(logic_Direction.right);
			}
		} else if(diffX < diffY) {
			if(this.swipeStart.y > this.swipeStop.y) {
				this.doSwipe(logic_Direction.up);
			} else {
				this.doSwipe(logic_Direction.down);
			}
		}
		this.swipeStart.set(0,0);
		this.swipeStop.set(0,0);
		this.swipeDirection.set(0,0);
	}
	,keyDown: function(event) {
		var direction = null;
		if(event.keyCode == 38) {
			direction = logic_Direction.up;
		} else if(event.keyCode == 37) {
			direction = logic_Direction.left;
		} else if(event.keyCode == 40) {
			direction = logic_Direction.down;
		} else if(event.keyCode == 39) {
			direction = logic_Direction.right;
		}
		this.doSwipe(direction);
	}
	,doSwipe: function(direction) {
		if(direction != null && this.enabled) {
			this.chains = 0;
			this.enabled = false;
			this.lastSwipeDirection = direction;
			this.logic.swipe(direction);
			this.syncNodes(false);
			this.lastRemoved = this.logic.remove();
			haxe_Timer.delay($bind(this,this.nextStep),550);
		}
	}
	,nextStep: function() {
		if(this.lastRemoved.length > 0) {
			this.chains++;
			if(this.chains > 1) {
				controls_PraiseManager.showMessage("Chained " + this.chains + "X!",400);
			}
			this.logic.clearRemoved(this.lastRemoved);
			this.logic.swipe(this.lastSwipeDirection);
			this.syncNodes(true);
			var removed = this.lastRemoved.length;
			this.lastRemoved = this.logic.remove();
			if(this.lastRemoved.length == 0) {
				this.enabled = true;
			}
			haxe_Timer.delay($bind(this,this.nextStep),600);
			this.emit(controls_GridControl.ON_BLOCK_REMOVE,removed * 15);
		} else {
			this.logic.spawnRandom();
			this.syncNodes(false);
			this.enabled = true;
		}
	}
	,__class__: controls_GridControl
});
var controls_PraiseManager = $hx_exports["PraiseManager"] = function() {
	this.current = 0;
	PIXI.Container.call(this);
	controls_PraiseManager.instance = this;
	this.initializeControls();
};
controls_PraiseManager.__name__ = true;
controls_PraiseManager.showMessage = function(message,delay) {
	haxe_Timer.delay(function() {
		controls_PraiseManager.instance.showPraise(message);
	},delay);
};
controls_PraiseManager.__super__ = PIXI.Container;
controls_PraiseManager.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		var ts = { };
		ts.dropShadow = true;
		ts.dropShadowColor = "rgba(0,0,0,0.3)";
		ts.dropShadowBlur = 3;
		ts.fontSize = 90;
		ts.fill = 16777215;
		this.texts = [];
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var text = new PIXI.Text("4 chain!",ts);
			this.texts.push(text);
			text.visible = false;
			this.addChild(text);
		}
	}
	,showPraise: function(message) {
		this.current++;
		this.current %= this.texts.length;
		var text = this.texts[this.current];
		text.text = message;
		text.pivot.x = text.width / 2;
		text.pivot.y = text.height / 2;
		text.visible = true;
		text.alpha = 1;
		createjs.Tween.get(text.scale).to({ x : 1.7, y : 1.7},800,createjs.Ease.quadOut);
		createjs.Tween.get(text).wait(500,true).to({ alpha : 0},300,createjs.Ease.quadOut);
	}
	,__class__: controls_PraiseManager
});
var controls_Score = function() {
	this.curScore = 0;
	this.scoreTarget = 0;
	PIXI.Container.call(this);
	this.initializeControls();
	Main.instance.tickListeners.push($bind(this,this.ontick));
};
controls_Score.__name__ = true;
controls_Score.__super__ = PIXI.Container;
controls_Score.prototype = $extend(PIXI.Container.prototype,{
	prepare: function() {
		this.curScore = 0;
		this.scoreTarget = 0;
		this.scoreField.text = "0";
	}
	,initializeControls: function() {
		var ts = { };
		ts.dropShadow = true;
		ts.dropShadowColor = "rgba(0,0,0,0.3)";
		ts.dropShadowBlur = 3;
		ts.fontSize = 90;
		ts.fill = 16777215;
		this.scoreField = new PIXI.Text("12512",ts);
		this.addChild(this.scoreField);
	}
	,ontick: function(delta) {
		this.curScore += Math.round(this.scoreTarget - this.curScore) / 15;
		if(this.curScore - 1 > this.scoreTarget) {
			this.curScore = this.scoreTarget;
		}
		this.scoreField.text = Std.string(Math.floor(this.curScore));
		this.scoreField.x = Math.round(0);
	}
	,setScore: function(value) {
		this.scoreTarget = value;
	}
	,__class__: controls_Score
});
var controls_StartView = function() {
	PIXI.Container.call(this);
	this.initializeControls();
};
controls_StartView.__name__ = true;
controls_StartView.__super__ = PIXI.Container;
controls_StartView.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.logo = util_Asset.getImage("logo.png",true);
		this.start = util_Asset.getImage("start_button.png",true);
		this.bg = util_Asset.getImage("bg.jpg",false);
		this.start.y = 720;
		this.start.x = 110;
		this.start.interactive = true;
		this.addChild(this.bg);
		this.logo.addChild(this.start);
	}
	,resize: function(size) {
		var s = Math.max(size.width / this.bg.width,size.height / this.bg.height);
		this.scale.x = this.scale.y = s;
		this.x = Math.round((size.width - this.bg.width * s) / 2);
		this.y = Math.round((size.height - this.bg.height * s) / 2);
	}
	,__class__: controls_StartView
});
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var logic_Direction = { __ename__ : true, __constructs__ : ["left","right","up","down"] };
logic_Direction.left = ["left",0];
logic_Direction.left.toString = $estr;
logic_Direction.left.__enum__ = logic_Direction;
logic_Direction.right = ["right",1];
logic_Direction.right.toString = $estr;
logic_Direction.right.__enum__ = logic_Direction;
logic_Direction.up = ["up",2];
logic_Direction.up.toString = $estr;
logic_Direction.up.__enum__ = logic_Direction;
logic_Direction.down = ["down",3];
logic_Direction.down.toString = $estr;
logic_Direction.down.__enum__ = logic_Direction;
var logic_Orientation = { __ename__ : true, __constructs__ : ["horizontal","vertical"] };
logic_Orientation.horizontal = ["horizontal",0];
logic_Orientation.horizontal.toString = $estr;
logic_Orientation.horizontal.__enum__ = logic_Orientation;
logic_Orientation.vertical = ["vertical",1];
logic_Orientation.vertical.toString = $estr;
logic_Orientation.vertical.__enum__ = logic_Orientation;
var logic_GridLogic = function() {
	haxe_Log.trace(logic_GridLogic.GRID_WIDTH,{ fileName : "GridLogic.hx", lineNumber : 37, className : "logic.GridLogic", methodName : "new", customParams : [logic_GridLogic.GRID_HEIGHT,logic_GridLogic.MAX_VALUE]});
	this.grid = [];
	this.nodes = [];
	var _g1 = 0;
	var _g = logic_GridLogic.GRID_WIDTH;
	while(_g1 < _g) {
		var i = _g1++;
		this.grid[i] = [];
		var _g3 = 0;
		var _g2 = logic_GridLogic.GRID_HEIGHT;
		while(_g3 < _g2) {
			var j = _g3++;
			var n = { value : -1, x : i, y : j};
			this.grid[i][j] = n;
			this.nodes.push(n);
		}
	}
};
logic_GridLogic.__name__ = true;
logic_GridLogic.INIT = function() {
	var regWidth = new EReg("width=([0-9]*)","");
	var regHeight = new EReg("height=([0-9]*)","");
	var regValue = new EReg("maxvalue=([0-9]*)","");
	var regRMin = new EReg("rmin=([0-9]*)","");
	var regRMax = new EReg("rmax=([0-9]*)","");
	if(regWidth.match(window.location.hash)) {
		logic_GridLogic.GRID_WIDTH = Std.parseInt(regWidth.matched(1));
	}
	if(regHeight.match(window.location.hash)) {
		logic_GridLogic.GRID_HEIGHT = Std.parseInt(regHeight.matched(1));
	}
	if(regValue.match(window.location.hash)) {
		logic_GridLogic.MAX_VALUE = Std.parseInt(regValue.matched(1));
	}
	if(regRMin.match(window.location.hash)) {
		var tmp = regRMin.matched(1);
		logic_GridLogic.RANDOM_SPAWN_AMOUNT.min = Std.parseInt(tmp);
	}
	if(regRMax.match(window.location.hash)) {
		var tmp1 = regRMax.matched(1);
		logic_GridLogic.RANDOM_SPAWN_AMOUNT.max = Std.parseInt(tmp1);
	}
};
logic_GridLogic.prototype = {
	spawnRandom: function() {
		var possible = this.nodes.filter(function(n) {
			return n.value == -1;
		});
		var amount = Math.floor(Math.min(possible.length,Math.random() * (logic_GridLogic.RANDOM_SPAWN_AMOUNT.max - logic_GridLogic.RANDOM_SPAWN_AMOUNT.min) + logic_GridLogic.RANDOM_SPAWN_AMOUNT.min));
		var _g1 = 0;
		var _g = amount;
		while(_g1 < _g) {
			var i = _g1++;
			var rnd = Math.floor(Math.random() * possible.length);
			var n1 = possible[rnd];
			HxOverrides.remove(possible,n1);
			this.randomizeValue(n1);
		}
	}
	,randomizeValue: function(node) {
		if(node.value != -1) {
			throw new js__$Boot_HaxeError("Randomizing node with existing value.");
		}
		node.value = Math.floor(Math.random() * logic_GridLogic.MAX_VALUE);
		if(this.remove().length > 0) {
			node.value = -1;
		}
	}
	,swipe: function(direction) {
		if(direction == logic_Direction.right) {
			this.bubbleRight();
		} else if(direction == logic_Direction.left) {
			this.bubbleLeft();
		} else if(direction == logic_Direction.down) {
			this.bubbleDown();
		} else if(direction == logic_Direction.up) {
			this.bubbleUp();
		}
	}
	,bubbleRight: function() {
		var _g1 = 0;
		var _g = logic_GridLogic.GRID_HEIGHT;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 1;
			var _g2 = logic_GridLogic.GRID_WIDTH;
			while(_g3 < _g2) {
				var j = _g3++;
				var x = j;
				var n = this.grid[x][y];
				if(n.value == -1) {
					var _g5 = 0;
					var _g4 = j;
					while(_g5 < _g4) {
						var i = _g5++;
						var xn = j - i - 1;
						this.swap(n,this.grid[xn][y]);
					}
				}
			}
		}
	}
	,bubbleLeft: function() {
		var _g1 = 0;
		var _g = logic_GridLogic.GRID_HEIGHT;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 1;
			var _g2 = logic_GridLogic.GRID_WIDTH;
			while(_g3 < _g2) {
				var j = _g3++;
				var x = logic_GridLogic.GRID_WIDTH - j - 1;
				var n = this.grid[x][y];
				if(n.value == -1) {
					var _g5 = x + 1;
					var _g4 = logic_GridLogic.GRID_WIDTH;
					while(_g5 < _g4) {
						var i = _g5++;
						this.swap(n,this.grid[i][y]);
					}
				}
			}
		}
	}
	,bubbleDown: function() {
		var _g1 = 0;
		var _g = logic_GridLogic.GRID_WIDTH;
		while(_g1 < _g) {
			var x = _g1++;
			var _g3 = 1;
			var _g2 = logic_GridLogic.GRID_HEIGHT;
			while(_g3 < _g2) {
				var j = _g3++;
				var y = j;
				var n = this.grid[x][y];
				if(n.value == -1) {
					var _g5 = 0;
					var _g4 = j;
					while(_g5 < _g4) {
						var i = _g5++;
						var yn = j - i - 1;
						this.swap(n,this.grid[x][yn]);
					}
				}
			}
		}
	}
	,bubbleUp: function() {
		var _g1 = 0;
		var _g = logic_GridLogic.GRID_WIDTH;
		while(_g1 < _g) {
			var x = _g1++;
			var _g3 = 1;
			var _g2 = logic_GridLogic.GRID_HEIGHT;
			while(_g3 < _g2) {
				var j = _g3++;
				var y = logic_GridLogic.GRID_HEIGHT - j - 1;
				var n = this.grid[x][y];
				if(n.value == -1) {
					var _g5 = y + 1;
					var _g4 = logic_GridLogic.GRID_HEIGHT;
					while(_g5 < _g4) {
						var i = _g5++;
						this.swap(n,this.grid[x][i]);
					}
				}
			}
		}
	}
	,swap: function(n1,n2) {
		var n1x = n1.x;
		var n1y = n1.y;
		var n2x = n2.x;
		var n2y = n2.y;
		this.grid[n1x][n1y] = n2;
		this.grid[n2x][n2y] = n1;
		n1.x = n2x;
		n1.y = n2y;
		n2.x = n1x;
		n2.y = n1y;
	}
	,remove: function() {
		var found = [];
		var _g1 = 0;
		var _g = logic_GridLogic.GRID_WIDTH;
		while(_g1 < _g) {
			var i = _g1++;
			this.sweepTestVertical(found,i);
		}
		var _g11 = 0;
		var _g2 = logic_GridLogic.GRID_HEIGHT;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.sweepTestHorizontal(found,i1);
		}
		var removed = [];
		var _g3 = 0;
		var _g12 = this.nodes;
		while(_g3 < _g12.length) {
			var n = _g12[_g3];
			++_g3;
			var match = this.testSquareMatch(n);
			if(match != null) {
				var _g21 = 0;
				while(_g21 < match.length) {
					var rn = match[_g21];
					++_g21;
					if(removed.indexOf(rn) == -1) {
						removed.push(rn);
					}
				}
			}
		}
		var _g4 = 0;
		while(_g4 < found.length) {
			var line = found[_g4];
			++_g4;
			var _g13 = 0;
			var _g22 = line.nodes;
			while(_g13 < _g22.length) {
				var n1 = _g22[_g13];
				++_g13;
				if(removed.indexOf(n1) == -1) {
					removed.push(n1);
				}
			}
		}
		if(removed.length > 0) {
			haxe_Log.trace("REMVOED: " + removed.length,{ fileName : "GridLogic.hx", lineNumber : 276, className : "logic.GridLogic", methodName : "remove"});
		}
		return removed;
	}
	,clearRemoved: function(removed) {
		var _g = 0;
		while(_g < removed.length) {
			var n = removed[_g];
			++_g;
			n.value = -1;
		}
	}
	,testSquareMatch: function(node) {
		if(node.value == -1) {
			return null;
		}
		if(node.x > logic_GridLogic.GRID_WIDTH - 2) {
			return null;
		}
		if(node.y > logic_GridLogic.GRID_HEIGHT - 2) {
			return null;
		}
		var ret = [];
		if(this.grid[node.x + 1][node.y + 1].value == node.value && this.grid[node.x][node.y + 1].value == node.value && this.grid[node.x + 1][node.y].value == node.value) {
			ret.push(node);
			ret.push(this.grid[node.x + 1][node.y + 1]);
			ret.push(this.grid[node.x][node.y + 1]);
			ret.push(this.grid[node.x + 1][node.y]);
		}
		return ret;
	}
	,sweepTestHorizontal: function(found,y) {
		var current = [this.grid[0][y]];
		var _g1 = 1;
		var _g = logic_GridLogic.GRID_WIDTH;
		while(_g1 < _g) {
			var i = _g1++;
			var cmp = this.grid[i][y];
			if(cmp.value == current[0].value && cmp.value >= 0) {
				current.push(cmp);
			} else {
				if(current.length >= 3) {
					found.push({ orientation : logic_Orientation.horizontal, nodes : current});
				}
				current = [cmp];
			}
		}
		if(current.length >= 3) {
			found.push({ orientation : logic_Orientation.horizontal, nodes : current});
		}
	}
	,sweepTestVertical: function(found,x) {
		var current = [this.grid[x][0]];
		var _g1 = 1;
		var _g = logic_GridLogic.GRID_HEIGHT;
		while(_g1 < _g) {
			var i = _g1++;
			var cmp = this.grid[x][i];
			if(cmp.value == current[0].value && cmp.value >= 0) {
				current.push(cmp);
			} else {
				if(current.length >= 3) {
					found.push({ orientation : logic_Orientation.vertical, nodes : current});
				}
				current = [cmp];
			}
		}
		if(current.length >= 3) {
			found.push({ orientation : logic_Orientation.vertical, nodes : current});
		}
	}
	,isFinished: function() {
		var allFilled = true;
		var _g = 0;
		var _g1 = this.nodes;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(n.value == -1) {
				allFilled = false;
				break;
			}
		}
		return allFilled;
	}
	,printGrid: function() {
		var s = "finished: " + Std.string(this.isFinished()) + "\n";
		var _g1 = 0;
		var _g = logic_GridLogic.GRID_HEIGHT;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = logic_GridLogic.GRID_WIDTH;
			while(_g3 < _g2) {
				var x = _g3++;
				var n = this.grid[x][y];
				s += n.value >= 0 ? n.value == null ? "null" : "" + n.value : " ";
			}
			s += "\n";
		}
		haxe_Log.trace(s,{ fileName : "GridLogic.hx", lineNumber : 384, className : "logic.GridLogic", methodName : "printGrid"});
	}
	,__class__: logic_GridLogic
};
var particles_BaseParticleEffect = function() {
	this.complete = true;
	PIXI.Container.call(this);
};
particles_BaseParticleEffect.__name__ = true;
particles_BaseParticleEffect.__super__ = PIXI.Container;
particles_BaseParticleEffect.prototype = $extend(PIXI.Container.prototype,{
	update: function(d) {
	}
	,clear: function() {
	}
	,__class__: particles_BaseParticleEffect
});
var particles_ParticleManager = $hx_exports["ParticleManager"] = function() {
	throw new js__$Boot_HaxeError("Particle manager is static.");
};
particles_ParticleManager.__name__ = true;
particles_ParticleManager.init = function() {
	particles_ParticleManager.particles = new PIXI.Container();
	particles_ParticleManager.squares = new particles_SquareParticles();
	particles_ParticleManager.particles.addChild(particles_ParticleManager.squares);
};
particles_ParticleManager.rand = function(min,max) {
	return Math.floor(min + Math.random() * (max - min));
};
particles_ParticleManager.prototype = {
	__class__: particles_ParticleManager
};
var particles_SquareParticles = function() {
	this.area = new PIXI.Rectangle(0,0,2048,2048);
	var _gthis = this;
	particles_BaseParticleEffect.call(this);
	var c = 0;
	this.pool = new util_Pool(450,function() {
		var p = { sprite : util_Asset.getImage("star.png",true), lifetime : 0, maxlife : 0, sx : 0, sy : 0};
		_gthis.addChild(p.sprite);
		p.sprite.scale.x = p.sprite.scale.y = 0.5;
		var tmp = Math.random();
		p.sprite.anchor.x = p.sprite.anchor.y = 0.5 + tmp;
		p.sprite.blendMode = PIXI.BLEND_MODES.ADD;
		p.sprite.visible = false;
		_gthis.randomizeParticle(p,0);
		return p;
	});
};
particles_SquareParticles.__name__ = true;
particles_SquareParticles.__super__ = particles_BaseParticleEffect;
particles_SquareParticles.prototype = $extend(particles_BaseParticleEffect.prototype,{
	spawn: function(point,color) {
		this.area.x = point.x - 32.5;
		this.area.y = point.y - 32.5;
		this.area.height = 65.;
		this.area.width = 65.;
		var _g = 0;
		while(_g < 50) {
			var i = _g++;
			var p = this.pool.getNext();
			this.randomizeParticle(p,color);
		}
	}
	,randomizeParticle: function(p,color) {
		var tmp = Math.random() * 0.06;
		p.sprite.scale.x = p.sprite.scale.y = tmp + 0.025;
		p.lifetime = (Math.random() + 0.5) * 80 + 30;
		p.maxlife = p.lifetime;
		var tmp1 = Math.random() * this.area.width;
		p.sprite.x = tmp1 + this.area.x;
		var tmp2 = Math.random() * this.area.height;
		p.sprite.y = tmp2 + this.area.y;
		p.sprite.visible = true;
		p.sx = (Math.random() - 0.5) * 2;
		p.sy = (Math.random() - 1.5) * 2;
		p.sprite.alpha = 1;
		p.sprite.rotation = 0;
		p.sprite.tint = color;
		createjs.Tween.get(p.sprite).to({ alpha : 0, rotation : Math.random() * Math.PI * 5},600 + Math.floor(Math.random() * 400),createjs.Ease.quadOut);
		var tmp3 = createjs.Tween.get(p.sprite.scale);
		var tmp4 = 600 + Math.floor(Math.random() * 400);
		tmp3.to({ x : 0.5, y : 0.5},tmp4,createjs.Ease.quadOut);
	}
	,clear: function() {
		particles_BaseParticleEffect.prototype.clear.call(this);
	}
	,__class__: particles_SquareParticles
});
var sounds_Sounds = $hx_exports["Sounds"] = function() { };
sounds_Sounds.__name__ = true;
sounds_Sounds.initSounds = function() {
	createjs.Sound.addEventListener("fileload",sounds_Sounds.soundLoadHandler);
	sounds_Sounds.loaded = [];
	sounds_Sounds.soundMap = new haxe_ds_StringMap();
	var base = "snd/";
	sounds_Sounds.sounds = [{ s : sounds_Sounds.BACKGROUND, c : 1}];
	var _g = 0;
	var _g1 = sounds_Sounds.sounds;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		createjs.Sound.registerSound(base + Std.string(s.s) + ".mp3",s.s,s.c);
	}
	var iOS = new RegExp("iPad|iPhone|iPod").test(window.navigator.userAgent) && !window.MSStream;
	if(iOS) {
		sounds_Sounds.waitingForIOS = true;
		window.addEventListener("click",sounds_Sounds.handleInitClick,true);
		window.addEventListener("touchstart",sounds_Sounds.handleInitClick,true);
	}
	var hidden = null;
	var visibilityChange = null;
	if(window.document.hidden != null) {
		hidden = "hidden";
		visibilityChange = "visibilitychange";
	} else if(window.document.msHidden != null) {
		hidden = "msHidden";
		visibilityChange = "msvisibilitychange";
	} else if(window.document.webkitHidden != null) {
		hidden = "webkitHidden";
		visibilityChange = "webkitvisibilitychange";
	}
	window.document.addEventListener(visibilityChange,function() {
		if(Reflect.field(window.document,hidden)) {
			sounds_Sounds.stopSound(sounds_Sounds.BACKGROUND);
			createjs.Sound.setMute(true);
		} else {
			createjs.Sound.setMute(false);
			if(!createjs.Sound.getMute() && !sounds_Sounds.waitingForIOS) {
				sounds_Sounds.playEffect(sounds_Sounds.BACKGROUND,-1,1);
			}
		}
	});
	sounds_Sounds.initok = true;
	sounds_Sounds.totalSounds = 0;
	return true;
};
sounds_Sounds.soundLoadHandler = function(e) {
	sounds_Sounds.soundsLoaded++;
	if(sounds_Sounds.loadChange != null) {
		sounds_Sounds.loadChange(sounds_Sounds.soundsLoaded);
	}
	if(e.id != null) {
		sounds_Sounds.loaded.push(e.id);
	}
	if(e.id == sounds_Sounds.BACKGROUND && !createjs.Sound.getMute() && !sounds_Sounds.waitingForIOS && !sounds_Sounds.ingame) {
		sounds_Sounds.playEffect(sounds_Sounds.BACKGROUND,-1,sounds_Sounds.bg_volume);
	}
	if(sounds_Sounds.soundsLoaded == sounds_Sounds.totalSounds && sounds_Sounds.loadedHandler != null) {
		sounds_Sounds.loadedHandler();
	}
};
sounds_Sounds.handleInitClick = function(event) {
	sounds_Sounds.waitingForIOS = false;
	window.removeEventListener("touchstart",sounds_Sounds.handleInitClick,true);
	window.removeEventListener("click",sounds_Sounds.handleInitClick,true);
	if(!createjs.Sound.getMute()) {
		if(sounds_Sounds.loaded.indexOf(sounds_Sounds.BACKGROUND) >= 0) {
			sounds_Sounds.playEffect(sounds_Sounds.BACKGROUND,-1,sounds_Sounds.bg_volume);
		}
	}
};
sounds_Sounds.playEffect = function(name,loops,volume,delay) {
	if(!sounds_Sounds.soundRegistered(name)) {
		haxe_Log.trace("sound " + name + " not found",{ fileName : "Sounds.hx", lineNumber : 189, className : "sounds.Sounds", methodName : "playEffect"});
	}
	if(!createjs.Sound.getMute() && sounds_Sounds.initok && sounds_Sounds.soundRegistered(name)) {
		if(volume == null) {
			volume = 1;
		}
		if(loops == null) {
			loops = 0;
		}
		if(delay == null) {
			delay = 0;
		}
		var _this = sounds_Sounds.soundMap;
		var value = createjs.Sound.play(name,{ delay : delay, interrupt : createjs.Sound.INTERRUPT_ANY, loop : loops, volume : volume});
		if(__map_reserved[name] != null) {
			_this.setReserved(name,value);
		} else {
			_this.h[name] = value;
		}
	}
	var _this1 = sounds_Sounds.soundMap;
	if(__map_reserved[name] != null) {
		return _this1.getReserved(name);
	} else {
		return _this1.h[name];
	}
};
sounds_Sounds.soundRegistered = function(name) {
	return Object.prototype.hasOwnProperty.call(createjs.Sound._idHash,name);
};
sounds_Sounds.stopSound = function(name) {
	var _this = sounds_Sounds.soundMap;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		var _this1 = sounds_Sounds.soundMap;
		(__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]).stop();
	}
};
sounds_Sounds.getSound = function(name) {
	var _this = sounds_Sounds.soundMap;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
sounds_Sounds.enableSounds = function() {
	if(createjs.Sound.getMute() && sounds_Sounds.initok) {
		createjs.Sound.setMute(false);
		sounds_Sounds.stopSound(sounds_Sounds.BACKGROUND);
		if(sounds_Sounds.loaded.indexOf(sounds_Sounds.BACKGROUND) >= 0) {
			sounds_Sounds.playEffect(sounds_Sounds.BACKGROUND,-1,sounds_Sounds.bg_volume);
		}
	}
};
sounds_Sounds.disableSounds = function() {
	createjs.Sound.setMute(true);
};
var util_Asset = $hx_exports["util"]["Asset"] = function() {
	throw new js__$Boot_HaxeError("Asset is static only.");
};
util_Asset.__name__ = true;
util_Asset.init = function(loader) {
	util_Asset._loader = loader;
};
util_Asset.getResource = function(name) {
	if(!Object.prototype.hasOwnProperty.call(util_Asset._loader.resources,name)) {
		haxe_Log.trace("Resource " + name + " not found!",{ fileName : "Asset.hx", lineNumber : 39, className : "util.Asset", methodName : "getResource"});
	}
	return Reflect.field(util_Asset._loader.resources,name);
};
util_Asset.getRawImage = function(name) {
	return util_Asset.getResource(name).data;
};
util_Asset.getTexture = function(name,fromSheet) {
	if(!fromSheet) {
		name = "img/" + name;
	}
	var tex = null;
	try {
		tex = PIXI.Texture.fromFrame(name);
	} catch( e ) {
		tex = PIXI.Texture.fromImage(name);
	}
	if(tex == null) {
		haxe_Log.trace("Warning: Asset " + name + " not found.",{ fileName : "Asset.hx", lineNumber : 81, className : "util.Asset", methodName : "getTexture"});
	}
	if(tex != null && util_Asset._prepared.indexOf(tex.baseTexture) == -1) {
		util_Asset._prepared.push(tex.baseTexture);
		Main.instance.renderer.plugins.prepare.upload(tex.baseTexture);
	}
	return tex;
};
util_Asset.getImage = function(name,fromSheet) {
	if(!fromSheet) {
		name = "img/" + name;
	}
	var sprite = null;
	try {
		sprite = PIXI.Sprite.fromFrame(name);
	} catch( e ) {
		var t = PIXI.Texture.fromImage(name);
		var sprite1 = new PIXI.Sprite(t);
	}
	if(sprite == null) {
		haxe_Log.trace("Warning: Asset " + name + " not found.",{ fileName : "Asset.hx", lineNumber : 114, className : "util.Asset", methodName : "getImage"});
	}
	if(sprite != null && util_Asset._prepared.indexOf(sprite.texture.baseTexture) == -1) {
		util_Asset._prepared.push(sprite.texture.baseTexture);
		Main.instance.renderer.plugins.prepare.upload(sprite.texture.baseTexture);
	}
	return sprite;
};
util_Asset.getTexturesAndAnimations = function(json,id) {
	var tex = [];
	var anim = { };
	var ret = { textures : tex, animations : anim};
	var count = 0;
	var _g = 0;
	var _g1 = Reflect.fields(json.frames);
	while(_g < _g1.length) {
		var frame = _g1[_g];
		++_g;
		var data = Reflect.field(json.frames,frame);
		var split = frame.split("/");
		if(split[0] != id) {
			continue;
		}
		var animName = split[1];
		var spriteName = split[2];
		var texture = PIXI.Texture.fromFrame(frame);
		tex.push(texture);
		if(texture != null && util_Asset._prepared.indexOf(texture.baseTexture) == -1) {
			util_Asset._prepared.push(texture.baseTexture);
			Main.instance.renderer.plugins.prepare.upload(texture.baseTexture);
		}
		if(Object.prototype.hasOwnProperty.call(anim,animName)) {
			Reflect.field(anim,animName)[1] = count;
		} else {
			anim[animName] = [count,count];
		}
		++count;
	}
	return ret;
};
util_Asset.getTextures = function(json,id) {
	var tex = [];
	var _g = 0;
	var _g1 = Reflect.fields(json.frames);
	while(_g < _g1.length) {
		var frame = _g1[_g];
		++_g;
		var data = Reflect.field(json.frames,frame);
		if(id.match(frame)) {
			var texture = PIXI.Texture.fromFrame(frame);
			tex.push(texture);
			if(util_Asset._prepared.indexOf(texture.baseTexture) == -1) {
				util_Asset._prepared.push(texture.baseTexture);
				Main.instance.renderer.plugins.prepare.upload(texture.baseTexture);
			}
		}
	}
	return tex;
};
util_Asset.prototype = {
	__class__: util_Asset
};
var util_BrowserDetect = function() {
};
util_BrowserDetect.__name__ = true;
util_BrowserDetect.init = function() {
	util_BrowserDetect.browser = util_BrowserDetect.searchString(util_BrowserDetect.dataBrowser);
	var versionUserAgentResult = Std.string(util_BrowserDetect.searchVersion(window.navigator.userAgent));
	if(versionUserAgentResult == null) {
		var versionAppResult = Std.string(util_BrowserDetect.searchVersion(window.navigator.appVersion));
		if(versionAppResult == null) {
			util_BrowserDetect.version = "An unkonwn version";
		} else {
			util_BrowserDetect.version = versionAppResult;
		}
	} else {
		util_BrowserDetect.version = versionUserAgentResult;
	}
	var dataOsFind = util_BrowserDetect.searchString(util_BrowserDetect.dataOS);
	util_BrowserDetect.OS = dataOsFind == null ? "an unkonwn OS" : dataOsFind;
};
util_BrowserDetect.searchString = function(data) {
	var _g1 = 0;
	var _g = data.length;
	while(_g1 < _g) {
		var i = _g1++;
		var dataString = data[i].string;
		var dataProp = data[i].prop;
		var versionResult = data[i].versionSearch;
		util_BrowserDetect.versionSearchString = versionResult == null ? data[i].identity : versionResult;
		if(dataString != null) {
			if(dataString.indexOf(data[i].subString) != -1) {
				return data[i].identity;
			}
		} else if(dataProp != null) {
			return data[i].identity;
		}
	}
	return null;
};
util_BrowserDetect.searchVersion = function(dataString) {
	var index = dataString.indexOf(util_BrowserDetect.versionSearchString);
	if(index == -1) {
		return null;
	}
	return parseFloat(dataString.substring(index + util_BrowserDetect.versionSearchString.length + 1));
};
util_BrowserDetect.getAndroidVersion = function() {
	var ua = window.navigator.userAgent.toLowerCase();
	var reg = new EReg("android\\s([0-9\\.]*)","");
	var match = reg.match(ua);
	if(match) {
		return reg.matched(1);
	} else {
		return "0";
	}
};
util_BrowserDetect.prototype = {
	__class__: util_BrowserDetect
};
var util_LoaderWrapper = $hx_exports["LW"] = function() {
	throw new js__$Boot_HaxeError("LoaderWrapper is static only.");
};
util_LoaderWrapper.__name__ = true;
util_LoaderWrapper.beforeSheetLoad = function() {
	return function(r,next) {
		if(r.name.indexOf("json_image") >= 0 && r.url.indexOf("?") == -1) {
			r.url += "?_=" + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(Config.VERSION));
		}
		next();
	};
};
util_LoaderWrapper.LOAD_ASSETS = function(assets,onComplete) {
	util_LoaderWrapper.onComplete = onComplete;
	util_LoaderWrapper.complete = false;
	if(util_LoaderWrapper.loader == null) {
		util_LoaderWrapper.loader = new PIXI.loaders.Loader();
		util_LoaderWrapper.loader.before(util_LoaderWrapper.beforeSheetLoad());
		util_Asset.init(util_LoaderWrapper.loader);
	}
	util_LoaderWrapper.totalCount = 0;
	util_LoaderWrapper.batches = [];
	var batchSize = 1;
	var _g1 = 0;
	var _g = assets.length;
	while(_g1 < _g) {
		var i = _g1++;
		var batchNumber = Math.floor(i / batchSize);
		if(util_LoaderWrapper.batches[batchNumber] == null) {
			util_LoaderWrapper.batches[batchNumber] = [];
		}
		var name = assets[i];
		util_LoaderWrapper.batches[batchNumber].push(name);
		if(batchNumber == 0) {
			util_LoaderWrapper.addLoad(name);
		}
		if(name.indexOf("img") >= 0 && HxOverrides.substr(name,name.length - 4,4) == "json") {
			util_LoaderWrapper.totalCount += 2;
		} else if(name.indexOf(".fnt") >= 0) {
			util_LoaderWrapper.totalCount += 2;
		} else {
			util_LoaderWrapper.totalCount++;
		}
	}
	util_LoaderWrapper.batches.shift();
	util_LoaderWrapper.loadCount = 0;
	util_LoaderWrapper.updateText();
	util_LoaderWrapper.loader.addListener("progress",function(e) {
		util_LoaderWrapper.loadCount++;
		util_LoaderWrapper.updateText();
	});
	util_LoaderWrapper.loader.addListener("complete",function(e1) {
		if(util_LoaderWrapper.batches.length == 0) {
			util_LoaderWrapper.imagesComplete = true;
			util_LoaderWrapper.assetLoaded();
		} else {
			var batch = util_LoaderWrapper.batches.shift();
			var _g2 = 0;
			while(_g2 < batch.length) {
				var name1 = batch[_g2];
				++_g2;
				util_LoaderWrapper.addLoad(name1);
			}
			util_LoaderWrapper.loader.load();
		}
	});
	util_LoaderWrapper.loader.load();
};
util_LoaderWrapper.addLoad = function(name) {
	var n = name;
	var index = n.indexOf("@");
	if(index >= 0) {
		n = HxOverrides.substr(n,0,index) + HxOverrides.substr(n,n.lastIndexOf("."),null);
	}
	util_LoaderWrapper.loader.add(n,name + "?_=" + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(Config.VERSION)));
};
util_LoaderWrapper.assetLoaded = function() {
	if(util_LoaderWrapper.imagesComplete && !util_LoaderWrapper.complete) {
		util_LoaderWrapper.complete = true;
		util_LoaderWrapper.onComplete();
	}
};
util_LoaderWrapper.updateText = function() {
	var other = Math.floor(util_LoaderWrapper.loadCount / util_LoaderWrapper.totalCount) * 100;
	window.document.getElementById("preload").innerHTML = "Loading: please wait a moment. ";
};
util_LoaderWrapper.handleSound = function() {
	sounds_Sounds.loadChange = util_LoaderWrapper.updateSoundText;
};
util_LoaderWrapper.updateSoundText = function(amount) {
	util_LoaderWrapper.updateText();
};
util_LoaderWrapper.prototype = {
	__class__: util_LoaderWrapper
};
var util_MathUtil = function() {
};
util_MathUtil.__name__ = true;
util_MathUtil.findLineIntersection = function(p1,p2,p3,p4) {
	var x12 = p1.x - p2.x;
	var x34 = p3.x - p4.x;
	var y12 = p1.y - p2.y;
	var y34 = p3.y - p4.y;
	var c = x12 * y34 - y12 * x34;
	if(Math.abs(c) < 0.01) {
		return null;
	} else {
		var a = p1.x * p2.y - p1.y * p2.x;
		var b = p3.x * p4.y - p3.y * p4.x;
		var x = (a * x34 - b * x12) / c;
		var y = (a * y34 - b * y12) / c;
		return new PIXI.Point(x,y);
	}
};
util_MathUtil.normalize = function(point) {
	var np = new PIXI.Point(point.x,point.y);
	var l = Math.sqrt(np.x * np.x + np.y * np.y);
	if(l == 0) {
		l = 1;
	}
	np.x /= l;
	np.y /= l;
	return np;
};
util_MathUtil.pointLength = function(point) {
	return Math.sqrt(point.x * point.x + point.y * point.y);
};
util_MathUtil.calculateArea = function(polygon) {
	var sum = 0;
	var _g1 = 0;
	var _g = polygon.length;
	while(_g1 < _g) {
		var i = _g1++;
		sum += polygon[i].x * polygon[(i + 1) % polygon.length].y - polygon[i].y * polygon[(i + 1) % polygon.length].x;
	}
	return Math.abs(sum / 2);
};
util_MathUtil.clipInput = function(k,arr) {
	if(k < 0) {
		k = 0;
	}
	if(k > arr.length - 1) {
		k = arr.length - 1;
	}
	return arr[k];
};
util_MathUtil.getTangent = function(k,factor,array) {
	return factor * (util_MathUtil.clipInput(k + 1,array) - util_MathUtil.clipInput(k - 1,array)) / 2;
};
util_MathUtil.cubicInterpolation = function(array,t,tangentFactor) {
	if(tangentFactor == null) {
		tangentFactor = 1;
	}
	var k = Math.floor(t);
	var m_0 = util_MathUtil.getTangent(k,tangentFactor,array);
	var m_1 = util_MathUtil.getTangent(k + 1,tangentFactor,array);
	var p_0 = util_MathUtil.clipInput(k,array);
	var p_1 = util_MathUtil.clipInput(k + 1,array);
	t -= k;
	var t2 = t * t;
	var t3 = t * t2;
	return (2 * t3 - 3 * t2 + 1) * p_0 + (t3 - 2 * t2 + t) * m_0 + (-2 * t3 + 3 * t2) * p_1 + (t3 - t2) * m_1;
};
util_MathUtil.shuffle = function(array,key) {
	var index;
	var result = [];
	var copy = array.slice(0);
	while(copy.length > 0) {
		if(!isNaN(key)) {
			index = key % copy.length;
		} else {
			index = Math.floor(Math.random() * copy.length);
		}
		result.push(copy[index]);
		copy.splice(index,1);
	}
	return result;
};
util_MathUtil.prototype = {
	__class__: util_MathUtil
};
var util_Pool = $hx_exports["util"]["Pool"] = function(size,constructor) {
	var this1 = new Array(size);
	this._pool = this1;
	this._index = 0;
	if(constructor != null) {
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			this._pool[i] = constructor();
		}
	}
};
util_Pool.__name__ = true;
util_Pool.prototype = {
	get_all: function() {
		return this._pool;
	}
	,addItem: function(item) {
		this._pool[this._index] = item;
		this._index = (this._index + 1) % this._pool.length;
	}
	,getNext: function() {
		this._index = (this._index + 1) % this._pool.length;
		return this._pool[this._index];
	}
	,__class__: util_Pool
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
Config.ASSETS = ["img/ui.json","img/block_green.json","img/block_purple.json","img/block_orange.json","img/block_blue.json","img/bg.jpg","img/trail.png"];
Config.VERSION = "204crush 0.1";
controls_Block.moveLeft = [];
controls_Block.moveRight = [];
controls_Block.moveTop = [];
controls_Block.moveDown = [];
controls_Block.death = [];
controls_Block.defaultAnim = [];
controls_Block.idle = [];
controls_GridControl.ON_BLOCK_REMOVE = "onBlockRemove";
controls_GridControl.SPACING = 0;
controls_GridControl.BLOCK_HEIGHT = 130;
controls_GridControl.BLOCK_WIDTH = 130;
controls_GridControl.DEAD_ZONE = 50;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
js_Boot.__toStr = ({ }).toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
logic_GridLogic.GRID_WIDTH = 6;
logic_GridLogic.GRID_HEIGHT = 6;
logic_GridLogic.MAX_VALUE = 4;
logic_GridLogic.RANDOM_SPAWN_AMOUNT = { min : 1, max : 3};
sounds_Sounds.BLOB_SUCK = "blob_suck";
sounds_Sounds.BLOB_WRONG = "blob_wrong";
sounds_Sounds.BLOBS_COMBINE = "blobs_combine";
sounds_Sounds.BLOCK_BREAK = "block_break";
sounds_Sounds.BLOCK_HIT = "block_hit";
sounds_Sounds.TOGGLE = "toggle";
sounds_Sounds.ALU_BROMIDE = "alu_bromide";
sounds_Sounds.ALU_OXIDE = "alu_oxide";
sounds_Sounds.LITHIUM_BROMIDE = "lithium_bromide";
sounds_Sounds.LITHIUM_OXIDE = "lithium_oxide";
sounds_Sounds.MAG_BROMIDE = "mag_bromide";
sounds_Sounds.MAG_OXIDE = "mag_oxide";
sounds_Sounds.VICTORY = "victory";
sounds_Sounds.BACKGROUND = "Ion_in_A_Jar_01";
sounds_Sounds.bg_volume = 1;
sounds_Sounds.totalSounds = 0;
sounds_Sounds.initok = false;
sounds_Sounds.soundsLoaded = 0;
sounds_Sounds.waitingForIOS = false;
sounds_Sounds.ingame = false;
util_Asset._init = false;
util_Asset._prepared = [];
util_BrowserDetect.dataBrowser = [{ string : window.navigator.userAgent, subString : "Windows Phone 10.0", identity : "WindowsPhone10Edge"},{ string : window.navigator.userAgent, subString : "Chrome", identity : "Chrome"},{ string : window.navigator.userAgent, subString : "OmniWeb", versionSearch : "OmniWeb/", identity : "OmniWeb"},{ string : window.navigator.vendor, subString : "Apple", identity : "Safari", versionSearch : "Version"},{ string : window.navigator.vendor, subString : "iCab", identity : "iCab"},{ string : window.navigator.vendor, subString : "KDE", identity : "Konqueror"},{ string : window.navigator.userAgent, subString : "Firefox", identity : "Firefox"},{ string : window.navigator.vendor, subString : "Camino", identity : "Camino"},{ string : window.navigator.userAgent, subString : "Netscape", identity : "Netscape"},{ string : window.navigator.userAgent, subString : "MSIE", identity : "Explorer", versionSearch : "MSIE"},{ string : window.navigator.userAgent, subString : "Trident", identity : "Explorer11", versionSearch : "MSIE"},{ string : window.navigator.userAgent, subString : "Gecko", identity : "Mozilla", versionSearch : "rv"},{ string : window.navigator.userAgent, subString : "Mozilla", identity : "Netscape", versionSearch : "Mozilla"},{ prop : window.navigator.vendor, identity : "Opera", versionSearch : "Version"}];
util_BrowserDetect.dataOS = [{ string : window.navigator.platform, subString : "Win", identity : "Windows"},{ string : window.navigator.platform, subString : "Mac", identity : "Mac"},{ string : window.navigator.userAgent, subString : "iPhone", identity : "iPhone/iPod"},{ string : window.navigator.platform, subString : "Linux", identity : "Linux"}];
util_LoaderWrapper.complete = false;
util_LoaderWrapper.loadCount = 0;
util_LoaderWrapper.totalCount = 0;
util_LoaderWrapper.fontLoadStarted = false;
util_LoaderWrapper.imagesComplete = false;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
