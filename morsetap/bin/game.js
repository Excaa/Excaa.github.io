// Generated by Haxe 3.3.0
(function ($hx_exports) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Character = function() {
	PIXI.Container.call(this);
	this.bg = new PIXI.Graphics();
	this.bg.beginFill(Main.WHITE,1);
	this.bg.lineStyle(2,Main.DARK1,1);
	this.bg.moveTo(0,0);
	this.bg.lineTo(0,0);
	this.bg.lineTo(40,40);
	this.bg.lineTo(-40,40);
	this.bg.y = -25;
	this.bg.endFill();
	this.addChild(this.bg);
};
Character.__super__ = PIXI.Container;
Character.prototype = $extend(PIXI.Container.prototype,{
	jump: function() {
		createjs.Tween.removeTweens(this.bg);
		this.bg.tint = 65280;
	}
	,down: function() {
		createjs.Tween.removeTweens(this.bg);
		this.bg.tint = Main.HILIGHT;
	}
});
var GameView = function() {
	this.startimeset = false;
	this.wordlist = " KEEP ON JAMMING - CAN YOU BEAT THIS GAME - THIS MESSAGE LOOPS - ";
	this.offset = 0;
	this.heldDown = 0;
	this.lastd = 0;
	this.start = 0;
	this.speed = 1;
	this.wc = 0;
	this.down = false;
	this.ground = new PIXI.Graphics();
	this.columns = [];
	this.started = false;
	PIXI.Container.call(this);
	var tf = { };
	tf.fontFamily = "Impact";
	tf.fill = 16777215;
	tf.fontSize = 150;
	tf.strokeThickness = 15;
	tf.stroke = 0;
	this.gameover = new PIXI.Text("GAME OVER ",tf);
	this.ground = new PIXI.Graphics();
	this.character = new Character();
	this.bg = new PIXI.Graphics();
	this.bg.beginFill(9474192,1);
	this.bg.drawRect(0,0,1280,720);
	this.bg.endFill();
	this.addChild(this.bg);
	this.prepare();
	this.interactive = true;
	this.ground.beginFill(Main.SURFACE,1);
	this.ground.drawRect(0,0,1280,100);
	this.ground.endFill();
	this.ground.y = 620;
	this.addChild(this.ground);
	this.addChild(this.character);
	this.character.y = 630;
	this.character.x = 280;
	this.addListener("mousedown",$bind(this,this.ondown));
	this.addListener("touchstart",$bind(this,this.ondown));
	this.addListener("mouseup",$bind(this,this.onup));
	this.addListener("touchend",$bind(this,this.onup));
};
GameView.__super__ = PIXI.Container;
GameView.prototype = $extend(PIXI.Container.prototype,{
	prepare: function(replay) {
		this.wc = 0;
		this.startimeset = false;
		this.speed = 1;
		var _g = 0;
		var _g1 = this.columns;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			this.removeChild(r);
		}
		this.columns = [];
		var mc = null;
		var _g11 = 0;
		var _g2 = "CLICK TO START".length;
		while(_g11 < _g2) {
			var i = _g11++;
			mc = new MorseColumn("CLICK TO START".charAt(i),i % 2);
			this.addChild(mc);
			mc.tutorial = true;
			mc.x = this.wc;
			this.wc += mc.width;
			this.columns.push(mc);
		}
		if(replay) {
			var _g3 = 0;
			var _g12 = this.columns;
			while(_g3 < _g12.length) {
				var c = _g12[_g3];
				++_g3;
				c.x -= 2000;
			}
			this.wc -= 2000;
		}
		var startline = new PIXI.Graphics();
		startline.beginFill(Main.HILIGHT);
		startline.drawRect(0,0,5,620);
		startline.endFill();
		startline.x = mc.width - 5;
		mc.addChild(startline);
		this.gameover.visible = false;
		this.addChild(this.ground);
		this.addChild(this.character);
	}
	,spawnWord: function(word) {
		var _g1 = 0;
		var _g = word.length;
		while(_g1 < _g) {
			var i = _g1++;
			var mc = new MorseColumn(word.charAt(i),i % 2);
			this.addChild(mc);
			mc.tutorial = false;
			mc.x = this.wc;
			this.wc += mc.width;
			this.columns.push(mc);
		}
		this.addChild(this.ground);
		this.addChild(this.character);
	}
	,ondown: function() {
		if(!this.interactive) {
			return;
		}
		if(this.gameover.visible) {
			this.prepare(true);
		}
		this.gameover.visible = false;
		if(!this.started) {
			this.start = new Date().getTime();
		}
		this.lastd = new Date().getTime();
		this.started = true;
		this.character.jump();
		this.down = true;
	}
	,onup: function() {
		if(new Date().getTime() - this.lastd > 5000) {
			this.started = false;
			this.prepare(true);
			this.gameover.text = "DONT CHEAT!";
			this.gameover.visible = true;
			this.addChild(this.gameover);
			this.gameover.x = Math.round((1280 - this.gameover.width) / 2);
			this.gameover.y = Math.round((720 - this.gameover.height) / 2);
		}
		this.down = false;
		this.character.down();
	}
	,ontick: function(delta) {
		var _gthis = this;
		if(!this.started) {
			return;
		}
		var _g = 0;
		var _g1 = this.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.x + c.width < 0) {
				c.visible = false;
				continue;
			}
			if(c.x < this.character.x && !c.tutorial && !this.startimeset) {
				this.startimeset = true;
				this.start = new Date().getTime();
			}
			c.x -= delta * 2 * this.speed;
			if(!c.tutorial && c.x + c.width < this.character.x && c.blocks.length > 0) {
				this.gameover.text = "GAME OVER\nSCORE: " + Math.round((new Date().getTime() - this.start) / 1000);
				this.interactive = false;
				haxe_Timer.delay(function() {
					_gthis.interactive = true;
				},400);
				this.started = false;
				this.gameover.visible = true;
				this.addChild(this.gameover);
				this.gameover.x = Math.round((1280 - this.gameover.width) / 2);
				this.gameover.y = Math.round((720 - this.gameover.height) / 2);
			}
		}
		this.wc -= delta * 2 * this.speed;
		if(this.columns[this.columns.length - 1].x < 1280) {
			this.spawnWord(this.wordlist);
		}
		if(this.down) {
			var br = 0;
			var _g2 = 0;
			var _g11 = this.columns;
			while(_g2 < _g11.length) {
				var mc = _g11[_g2];
				++_g2;
				br += mc.testhit(this.character.x,this.speed);
			}
			console.log(br);
			if(br > 0) {
				this.onup();
			}
		}
		this.speed += 0.0005;
	}
});
var HxOverrides = function() { };
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
var Main = $hx_exports["Main"] = function() {
	this.initRenderer();
	this.initializeControls();
	this.resize();
	window.addEventListener("resize",$bind(this,this.resize));
};
Main.main = function() {
};
Main.prototype = {
	initRenderer: function() {
		this.canvas = window.document.getElementById("game");
		var options = { };
		options.view = this.canvas;
		this.renderer = PIXI.autoDetectRenderer(this.canvas.width,this.canvas.height,options);
	}
	,resize: function() {
		var w = window.innerWidth;
		var h = window.innerHeight;
		if(w > h * 1.7777777777777777) {
			w = Math.round(h * 1.7777777777777777);
		}
		if(h * 1.7777777777777777 > w) {
			h = Math.round(w / 1.7777777777777777);
		}
		this.renderer.resize(w,h);
		this.container.scale.x = this.container.scale.y = w / 1280;
	}
	,initializeControls: function() {
		this.container = new PIXI.Container();
		createjs.Ticker.setFPS(60);
		createjs.Ticker.addEventListener("tick",$bind(this,this.ontick));
		this.gameView = new GameView();
		this.container.addChild(this.gameView);
	}
	,ontick: function() {
		this.renderer.render(this.container);
		this.gameView.ontick(1);
	}
};
var MorseColumn = function(letter,val) {
	this.bc = new PIXI.Container();
	this.cors = [];
	this.blocks = [];
	this.dots = [];
	PIXI.Container.call(this);
	var tf = { };
	tf.fontFamily = "Impact";
	tf.fill = 16777215;
	tf.fontSize = 200;
	this.letter = new PIXI.Text(letter,tf);
	var size = this.drawblock(letter);
	this.letter.x = Math.round((size - this.letter.width) / 2);
	this.letter.y = 100;
	this.bg = new PIXI.Graphics();
	this.bg.beginFill(val == 0?Main.DARK2:Main.DARK1,1);
	this.bg.drawRect(0,0,size,620);
	this.bg.endFill();
	this.addChild(this.bg);
	this.addChild(this.letter);
	this.addChild(this.bc);
};
MorseColumn.__super__ = PIXI.Container;
MorseColumn.prototype = $extend(PIXI.Container.prototype,{
	drawblock: function(letter) {
		var conf = Reflect.field(MorseColumn.morses,letter.toUpperCase());
		if(conf == null) {
			return 200;
		}
		var xc = 20;
		var _g1 = 0;
		var _g = conf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var type = conf.charAt(i);
			var block = new PIXI.Graphics();
			var cor = new PIXI.Graphics();
			block.beginFill(Main.HILIGHT);
			if(type == ".") {
				block.drawRect(0,0,30,40);
				block.y = 580;
				block.type = ".";
				cor.drawRect(0,0,30,40);
				cor.y = 580;
			} else {
				block.type = "-";
				block.drawRect(0,0,70,120);
				block.y = 500;
				cor.drawRect(0,0,70,120);
				cor.y = 500;
			}
			block.x = xc;
			xc += block.width + 20;
			block.endFill();
			this.bc.addChild(block);
			this.blocks.push(block);
			this.cors.push(cor);
			cor.scale.y = 0;
		}
		return xc + 20;
	}
	,testhit: function(x,delta) {
		if(x < this.x || x > this.width + this.x) {
			return 0;
		}
		var rm = [];
		var dc = 0;
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			var i = _g1++;
			var b = this.blocks[i];
			if(this.x + b.x < x && this.x + b.width + b.x > x) {
				var c = this.blocks[i];
				if(b.type == ".") {
					b.scale.y = 0;
				} else {
					b.scale.y -= delta * 0.15;
					b.y = 620 - b.height;
				}
				if(b.scale.y <= 0) {
					++dc;
					rm.push(b);
				}
			}
		}
		var _g2 = 0;
		while(_g2 < rm.length) {
			var m = rm[_g2];
			++_g2;
			HxOverrides.remove(this.blocks,m);
		}
		return dc;
	}
});
var Reflect = function() { };
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
Main.HILIGHT = 14431522;
Main.SURFACE = 14273438;
Main.DARK1 = 3621184;
Main.DARK2 = 2763819;
Main.DARK3 = 1973792;
Main.WHITE = 16777215;
Main.BLACK = 0;
MorseColumn.morses = { 'A' : ".-", 'B' : "-...", 'C' : "-.-.", 'D' : "-..", 'E' : ".", 'F' : "..-.", 'G' : "--.", 'H' : "....", 'I' : "..", 'J' : ".---", 'K' : "-.-", 'L' : ".-..", 'M' : "--", 'N' : "-.", 'O' : "---", 'P' : ".--.", 'Q' : "--.-", 'R' : ".-.", 'S' : "...", 'T' : "-", 'U' : "..-", 'V' : "...-", 'W' : ".--", 'X' : "-..-", 'Y' : "-.--", 'Z' : "--.."};
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);
